import { PropType } from 'vue';
import { BaseColumnDefinition, ColumnDefinition } from '../mt-data-table';
import { MtColorBadgeVariant } from '../../../feedback-indicator/mt-color-badge/mt-color-badge';
export interface BadgeColumnDefinition extends BaseColumnDefinition {
    renderer: "badge";
    rendererOptions: {
        renderItemBadge(data: unknown, columnDefinition: BadgeColumnDefinition): {
            label: string;
            variant: MtColorBadgeVariant;
        };
    };
}
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    columnDefinition: {
        type: PropType<ColumnDefinition>;
        required: true;
    };
    data: {
        type: PropType<unknown>;
        required: true;
    };
}>, {
    badgeProps: import('vue').ComputedRef<{
        label: string;
        variant: string;
    }>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    columnDefinition: {
        type: PropType<ColumnDefinition>;
        required: true;
    };
    data: {
        type: PropType<unknown>;
        required: true;
    };
}>> & Readonly<{}>, {}, {}, {
    "mt-color-badge": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        variant: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: MtColorBadgeVariant): boolean;
        };
        color: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        rounded: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasText: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {}, {}, {
        colorStyle(): string;
        variantClass(): Record<string, boolean>;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        variant: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: MtColorBadgeVariant): boolean;
        };
        color: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        rounded: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasText: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        color: string;
        variant: string;
        rounded: boolean;
        hasText: boolean;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
