/**
 * @internal
 */
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * The text which gets rendered in the tooltip
     */
    text: {
        type: StringConstructor;
        required: true;
        default: string;
    };
    /**
     * The width of the tooltip
     */
    width: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Choose the delay until the tooltip gets rendered when it gets hovered
     */
    showDelay: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Choose the delay until the tooltip gets removed the cursor leaves
     */
    hideDelay: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * The text which gets rendered in the tooltip
     */
    text: {
        type: StringConstructor;
        required: true;
        default: string;
    };
    /**
     * The width of the tooltip
     */
    width: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Choose the delay until the tooltip gets rendered when it gets hovered
     */
    showDelay: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Choose the delay until the tooltip gets removed the cursor leaves
     */
    hideDelay: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
}>> & Readonly<{}>, {
    text: string;
    width: number;
    showDelay: number;
    hideDelay: number;
}, {}, {
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
}, {
    tooltip: import('vue').ObjectDirective<any, any, string, string>;
}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
