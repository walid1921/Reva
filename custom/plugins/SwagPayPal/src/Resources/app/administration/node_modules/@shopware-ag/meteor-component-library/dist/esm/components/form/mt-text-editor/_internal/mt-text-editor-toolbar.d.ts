import { Editor } from '@tiptap/vue-3';
import { PropType } from 'vue';
export interface CustomButton {
    name: string;
    label: string;
    icon?: string;
    isActive?: (editor: Editor) => boolean;
    action?: (editor: Editor) => void;
    children?: CustomButton[];
    alignment?: "left" | "right";
    position?: number;
    disabled?: (editor: Editor, globalDisabled: boolean) => boolean;
    contextualButtons?: (editor: Editor) => CustomButton[];
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Partial<Record<string, (_: {
        editor: Editor;
        disabled: boolean;
        button: CustomButton;
    }) => any>> & Partial<Record<string, (_: {
        editor: Editor;
        disabled: boolean;
        button: CustomButton;
    }) => any>> & {
        default?(_: {}): any;
    };
    refs: {};
    rootEl: HTMLDivElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    editor: {
        type: PropType<Editor>;
        required: true;
    };
    customButtons: {
        type: PropType<CustomButton[]>;
        default: () => never[];
    };
    excludedButtons: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    updateContextualButtons: (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    editor: {
        type: PropType<Editor>;
        required: true;
    };
    customButtons: {
        type: PropType<CustomButton[]>;
        default: () => never[];
    };
    excludedButtons: {
        type: PropType<string[]>;
        default: () => never[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    onUpdateContextualButtons?: ((...args: any[]) => any) | undefined;
}>, {
    disabled: boolean;
    customButtons: CustomButton[];
    excludedButtons: string[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, HTMLDivElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
