import { PropType } from 'vue';
export interface Toast {
    id: number | string;
    msg: string;
    type: "informal" | "critical" | "positive";
    icon?: string;
    action?: {
        label: string;
        callback: () => void;
    };
    dismissible?: boolean;
}
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * A collection of toasts. The most current one needs to be prepended.
     */
    toasts: {
        type: PropType<Toast[]>;
        required: true;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "remove-toast": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * A collection of toasts. The most current one needs to be prepended.
     */
    toasts: {
        type: PropType<Toast[]>;
        required: true;
    };
}>> & Readonly<{
    "onRemove-toast"?: ((...args: any[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, HTMLDivElement>;
export default _default;
