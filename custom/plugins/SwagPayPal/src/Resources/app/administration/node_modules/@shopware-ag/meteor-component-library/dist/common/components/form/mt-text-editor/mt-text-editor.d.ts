import { CustomButton } from './_internal/mt-text-editor-toolbar';
import { PropType } from 'vue';
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Partial<Record<string, (_: {
        editor: import('@tiptap/vue-3').Editor;
        disabled: boolean;
        button: CustomButton;
    }) => any>> & {
        'contextual-buttons'?(_: {
            editor: import('@tiptap/vue-3').Editor;
            buttons: import('vue').Reactive<CustomButton[]>;
        }): any;
        'footer-left'?(_: {
            editor: import('@tiptap/vue-3').Editor;
        }): any;
        'footer-right'?(_: {
            editor: import('@tiptap/vue-3').Editor;
        }): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
        required: true;
    };
    /**
     * Enable inline edit mode
     */
    isInlineEdit: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Add custom configuration for the tip tap editor
     */
    tipTapConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Custom buttons to be added to the toolbar
     */
    customButtons: {
        type: PropType<CustomButton[]>;
        default: () => never[];
    };
    /**
     * Excluded buttons from the toolbar
     */
    excludedButtons: {
        type: PropType<string[]>;
        default: () => never[];
    };
    /**
     * Add disabled state to the editor
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Add placeholder text to the editor
     */
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * An error in your business logic related to this field.
     *
     * @example {"code": 500, "detail": "Error while saving"}
     */
    error: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    /**
     * A label for your text field. Usually used to guide the user what value this field controls.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: string;
        required: true;
    };
    /**
     * Enable inline edit mode
     */
    isInlineEdit: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Add custom configuration for the tip tap editor
     */
    tipTapConfig: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Custom buttons to be added to the toolbar
     */
    customButtons: {
        type: PropType<CustomButton[]>;
        default: () => never[];
    };
    /**
     * Excluded buttons from the toolbar
     */
    excludedButtons: {
        type: PropType<string[]>;
        default: () => never[];
    };
    /**
     * Add disabled state to the editor
     */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Add placeholder text to the editor
     */
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    /**
     * An error in your business logic related to this field.
     *
     * @example {"code": 500, "detail": "Error while saving"}
     */
    error: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    /**
     * A label for your text field. Usually used to guide the user what value this field controls.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    modelValue: string;
    placeholder: string;
    disabled: boolean;
    error: Record<string, any>;
    customButtons: CustomButton[];
    excludedButtons: string[];
    isInlineEdit: boolean;
    tipTapConfig: Record<string, any>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
