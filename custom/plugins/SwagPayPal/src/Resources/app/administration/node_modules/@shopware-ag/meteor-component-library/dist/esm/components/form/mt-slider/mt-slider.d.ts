import { PropType } from 'vue';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * Defines the label of the slider
     */
    label: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Defines the minimum value of the number.
     */
    min: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the maximum value of the number.
     */
    max: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the amount of which the number is increased or decreased per step.
     */
    step: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * The value of the slider.
     * If isRange is true, this should be an array with two values.
     * If isRange is false, this should be a single number.
     */
    modelValue: {
        type: PropType<number | number[]>;
        required: false;
        default: number;
        validator(value: unknown): boolean;
    };
    /**
     * Defines if it is a range slider.
     */
    isRange: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Defines the minimum distance between the two sliders.
     * Should be a multiple of the step.
     */
    minDistance: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the amount of marks on the slider.
     */
    markCount: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
}>, {}, {
    rangeRightValue: number;
    rangeLeftValue: number;
    activeSlider: null | "left" | "right";
}, {
    stringRepresentation(): string;
    styleStartPosition(): string;
    styleEndPosition(): string;
    markStep(): number;
    toolTipText(): string;
    toolTipStyle(): {
        display: string;
        left?: undefined;
        transform?: undefined;
        right?: undefined;
    } | {
        left: string;
        transform: string;
        display?: undefined;
        right?: undefined;
    } | {
        right: string;
        transform: string;
        display?: undefined;
        left?: undefined;
    };
}, {
    isArray(value: number | number[] | {
        target: number | number[];
    }): value is number[];
}, import('vue').ComponentOptionsMixin, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isInherited: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isInheritanceField: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    disableInheritanceToggle: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    copyable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    copyableTooltip: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    hasFocus: {
        type: BooleanConstructor;
        required: true;
    };
    helpText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    copyableText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    size: {
        type: StringConstructor;
        required: false;
        default: string;
        validator(value: string): boolean;
    };
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>, {
    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
    future: {
        removeCardWidth: boolean;
        removeDefaultMargin: boolean;
    };
}, {
    id: string | undefined;
}, {
    identification(): string;
    showLabel(): boolean;
    mtFieldLabelClasses(): {
        "is--required": boolean;
    };
    mtBlockSize(): string;
    hasError(): boolean;
}, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    validation: {
        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
        required: false;
        default: null;
    };
}>, {}, {}, {
    isValid(): boolean;
}, {
    validate(value: unknown): boolean;
    validateRule(value: unknown, rule: string): boolean;
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    validation: {
        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
        required: false;
        default: null;
    };
}>> & Readonly<{}>, {
    validation: string | boolean | Record<string, any> | unknown[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    mapInheritance: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>, {}, {}, {
    formFieldName(): string | undefined;
}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    mapInheritance: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>> & Readonly<{}>, {
    name: string;
    mapInheritance: Record<string, any>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isInherited: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    isInheritanceField: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    disableInheritanceToggle: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    copyable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    copyableTooltip: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    hasFocus: {
        type: BooleanConstructor;
        required: true;
    };
    helpText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    copyableText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    size: {
        type: StringConstructor;
        required: false;
        default: string;
        validator(value: string): boolean;
    };
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
}>> & Readonly<{}>, {
    name: string;
    size: string;
    required: boolean;
    disabled: boolean;
    isInherited: boolean;
    copyableText: string;
    isInheritanceField: boolean;
    disableInheritanceToggle: boolean;
    copyable: boolean;
    copyableTooltip: boolean;
    helpText: string;
}, {}, {
    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        isInherited: {
            type: BooleanConstructor;
            required: true;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        t: import('vue-i18n').ComposerTranslation<{
            en: {
                tooltipRemoveInheritance: string;
                tooltipRestoreInheritance: string;
            };
            de: {
                tooltipRemoveInheritance: string;
                tooltipRestoreInheritance: string;
            };
        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
        onClickRemoveInheritance: () => void;
        onClickRestoreInheritance: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        isInherited: {
            type: BooleanConstructor;
            required: true;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        disabled: boolean;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {
        tooltip: import('vue').ObjectDirective<any, any, string, string>;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
            default: string;
        };
        width: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showDelay: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
            default: string;
        };
        width: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showDelay: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }>> & Readonly<{}>, {
        text: string;
        width: number;
        showDelay: number;
        hideDelay: number;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {
        tooltip: import('vue').ObjectDirective<any, any, string, string>;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        copyableText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        copyToClipboard: () => void;
        tooltipText: import('vue').ComputedRef<string>;
        wasCopied: import('vue').Ref<boolean, boolean>;
    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
        createNotification(): void;
        createNotificationSuccess(config: any): void;
        createNotificationInfo(config: any): void;
        createNotificationWarning(config: any): void;
        createNotificationError(config: any): void;
        createSystemNotificationSuccess(config: any): void;
        createSystemNotificationInfo(config: any): void;
        createSystemNotificationWarning(config: any): void;
        createSystemNotificationError(config: any): void;
        createSystemNotification(config: any): void;
    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        copyableText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        tooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        tooltip: boolean;
        copyableText: string;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {
        tooltip: import('vue').ObjectDirective<any, any, string, string>;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * Defines the label of the slider
     */
    label: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Defines the minimum value of the number.
     */
    min: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the maximum value of the number.
     */
    max: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the amount of which the number is increased or decreased per step.
     */
    step: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * The value of the slider.
     * If isRange is true, this should be an array with two values.
     * If isRange is false, this should be a single number.
     */
    modelValue: {
        type: PropType<number | number[]>;
        required: false;
        default: number;
        validator(value: unknown): boolean;
    };
    /**
     * Defines if it is a range slider.
     */
    isRange: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Defines the minimum distance between the two sliders.
     * Should be a multiple of the step.
     */
    minDistance: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /**
     * Defines the amount of marks on the slider.
     */
    markCount: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
}>> & Readonly<{}>, {
    modelValue: number | number[];
    min: number;
    max: number;
    step: number;
    isRange: boolean;
    minDistance: number;
    markCount: number;
}, {}, {
    MtNumberField: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        numberType: {
            type: PropType<"float" | "int">;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        step: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        min: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        max: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        modelValue: {
            type: PropType<number | null>;
            required: false;
            default: null;
        };
        digits: {
            type: NumberConstructor;
            required: false;
            default: number;
            validator(value: number): boolean;
        };
        fillDigits: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        allowEmpty: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        numberAlignEnd: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        t: import('vue-i18n').ComposerTranslation<{
            en: {
                increaseButton: string;
                decreaseButton: string;
            };
            de: {
                increaseButton: string;
                decreaseButton: string;
            };
        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
        }>, never, "increaseButton" | "decreaseButton", "increaseButton" | "decreaseButton">;
    }, {}, {
        realStep(): number;
        realMinimum(): number | null;
        realMaximum(): number | null;
        stringRepresentation(): string;
        controlClasses(): {
            "mt-field__controls--disabled": boolean;
            "mt-field__controls--has-error": boolean;
        };
    }, {
        onChange(event: Event): void;
        onInput(event: Event): void;
        increaseNumberByStep(): void;
        decreaseNumberByStep(): void;
        computeValue(stringRepresentation: string): void;
        parseValue(value: any): any;
        checkBoundaries(value: number): number;
        getNumberFromString(value: any): number;
        checkForInteger(value: number): number;
    }, import('vue').ComponentOptionsMixin, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        modelValue: {
            type: PropType<string | number>;
            required: false;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        idSuffix: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {
        currentValue: string | number;
        hasFocus: boolean;
    }, {
        hasError(): boolean;
        hasDisabledInput(): boolean;
    }, {
        onChange(event: Event): void;
        onInput(event: Event): void;
        handleFocus(event: Event): void;
        restoreInheritance(): void;
        createInputId(identification: string): string;
        setFocusClass(): void;
        removeFocusClass(): void;
    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        modelValue: {
            type: PropType<string | number>;
            required: false;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        maxLength: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        idSuffix: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        size: string;
        required: boolean;
        label: string;
        modelValue: string | number;
        placeholder: string;
        disabled: boolean;
        error: Record<string, any>;
        isInherited: boolean;
        isInheritanceField: boolean;
        disableInheritanceToggle: boolean;
        copyable: boolean;
        copyableTooltip: boolean;
        helpText: string;
        maxLength: number;
        idSuffix: string;
    }, {}, {
        "mt-field-error": import('vue').DefineComponent<{
            error?: Record<string, any> | null;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            error?: Record<string, any> | null;
        }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {
            hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
            future: {
                removeCardWidth: boolean;
                removeDefaultMargin: boolean;
            };
        }, {
            id: string | undefined;
        }, {
            identification(): string;
            showLabel(): boolean;
            mtFieldLabelClasses(): {
                "is--required": boolean;
            };
            mtBlockSize(): string;
            hasError(): boolean;
        }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>, {}, {}, {
            isValid(): boolean;
        }, {
            validate(value: unknown): boolean;
            validateRule(value: unknown, rule: string): boolean;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            validation: string | boolean | Record<string, any> | unknown[];
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            size: string;
            required: boolean;
            disabled: boolean;
            isInherited: boolean;
            copyableText: string;
            isInheritanceField: boolean;
            disableInheritanceToggle: boolean;
            copyable: boolean;
            copyableTooltip: boolean;
            helpText: string;
        }, {}, {
            "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                t: import('vue-i18n').ComposerTranslation<{
                    en: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                    de: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                    [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                onClickRemoveInheritance: () => void;
                onClickRestoreInheritance: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                disabled: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>> & Readonly<{}>, {
                text: string;
                width: number;
                showDelay: number;
                hideDelay: number;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                copyToClipboard: () => void;
                tooltipText: import('vue').ComputedRef<string>;
                wasCopied: import('vue').Ref<boolean, boolean>;
            }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                createNotification(): void;
                createNotificationSuccess(config: any): void;
                createNotificationInfo(config: any): void;
                createNotificationWarning(config: any): void;
                createNotificationError(config: any): void;
                createSystemNotificationSuccess(config: any): void;
                createSystemNotificationInfo(config: any): void;
                createSystemNotificationWarning(config: any): void;
                createSystemNotificationError(config: any): void;
                createSystemNotification(config: any): void;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                tooltip: boolean;
                copyableText: string;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        numberType: {
            type: PropType<"float" | "int">;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        step: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        min: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        max: {
            type: NumberConstructor;
            required: false;
            default: null;
        };
        modelValue: {
            type: PropType<number | null>;
            required: false;
            default: null;
        };
        digits: {
            type: NumberConstructor;
            required: false;
            default: number;
            validator(value: number): boolean;
        };
        fillDigits: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        allowEmpty: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        numberAlignEnd: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        modelValue: number | null;
        min: number;
        max: number;
        step: number;
        numberType: "float" | "int";
        digits: number;
        fillDigits: boolean;
        allowEmpty: boolean;
        numberAlignEnd: boolean;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    MtBaseField: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasFocus: {
            type: BooleanConstructor;
            required: true;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        copyableText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {
        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
        future: {
            removeCardWidth: boolean;
            removeDefaultMargin: boolean;
        };
    }, {
        id: string | undefined;
    }, {
        identification(): string;
        showLabel(): boolean;
        mtFieldLabelClasses(): {
            "is--required": boolean;
        };
        mtBlockSize(): string;
        hasError(): boolean;
    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        validation: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
            required: false;
            default: null;
        };
    }>, {}, {}, {
        isValid(): boolean;
    }, {
        validate(value: unknown): boolean;
        validateRule(value: unknown, rule: string): boolean;
    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        validation: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        validation: string | boolean | Record<string, any> | unknown[];
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {}, {
        formFieldName(): string | undefined;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        mapInheritance: Record<string, any>;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasFocus: {
            type: BooleanConstructor;
            required: true;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        copyableText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        size: string;
        required: boolean;
        disabled: boolean;
        isInherited: boolean;
        copyableText: string;
        isInheritanceField: boolean;
        disableInheritanceToggle: boolean;
        copyable: boolean;
        copyableTooltip: boolean;
        helpText: string;
    }, {}, {
        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            isInherited: {
                type: BooleanConstructor;
                required: true;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            t: import('vue-i18n').ComposerTranslation<{
                en: {
                    tooltipRemoveInheritance: string;
                    tooltipRestoreInheritance: string;
                };
                de: {
                    tooltipRemoveInheritance: string;
                    tooltipRestoreInheritance: string;
                };
            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
            onClickRemoveInheritance: () => void;
            onClickRestoreInheritance: () => void;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            isInherited: {
                type: BooleanConstructor;
                required: true;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            disabled: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
                default: string;
            };
            width: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            showDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            hideDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
                default: string;
            };
            width: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            showDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            hideDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
        }>> & Readonly<{}>, {
            text: string;
            width: number;
            showDelay: number;
            hideDelay: number;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            copyableText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            tooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            copyToClipboard: () => void;
            tooltipText: import('vue').ComputedRef<string>;
            wasCopied: import('vue').Ref<boolean, boolean>;
        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
            createNotification(): void;
            createNotificationSuccess(config: any): void;
            createNotificationInfo(config: any): void;
            createNotificationWarning(config: any): void;
            createNotificationError(config: any): void;
            createSystemNotificationSuccess(config: any): void;
            createSystemNotificationInfo(config: any): void;
            createSystemNotificationWarning(config: any): void;
            createSystemNotificationError(config: any): void;
            createSystemNotification(config: any): void;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            copyableText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            tooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            tooltip: boolean;
            copyableText: string;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
}, {
    tooltip: import('vue').ObjectDirective<any, any, string, string>;
}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
