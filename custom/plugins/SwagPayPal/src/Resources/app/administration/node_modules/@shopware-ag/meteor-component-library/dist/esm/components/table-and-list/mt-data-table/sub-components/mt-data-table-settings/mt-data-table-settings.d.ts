import { PropType } from 'vue';
import { ColumnDefinition } from '../../mt-data-table';
import { Option as ItemResultOption } from '../../../../overlay/mt-popover-item-result/mt-popover-item-result';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    columns: {
        type: PropType<ColumnDefinition[]>;
        required: true;
    };
    showOutlines: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showStripes: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    enableOutlineFraming: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    enableRowNumbering: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>, {
    tableSettingsChildViews: import('vue').ComputedRef<{
        name: string;
        title: string;
    }[]>;
    resetAllChanges: () => void;
    columnGroups: import('vue').ComputedRef<{
        id: string;
        label: string;
        actionLabel: string;
    }[]>;
    columnOrderOptions: import('vue').ComputedRef<ItemResultOption[]>;
    onColumnChangeVisibility: (columnProperty: string, visibility: boolean) => void;
    onColumnClickGroupAction: (groupId: string) => void;
    onColumnChangeOrder: ({ itemId, dropZone, dropId, }: {
        itemId?: string;
        dropZone: "before" | "after";
        dropId?: string;
    }) => void;
    isPrimaryColumn: (column: ColumnDefinition) => boolean;
    t: import('vue-i18n').ComposerTranslation<{
        en: {
            title: string;
            resetAllChanges: string;
            columnOrder: {
                title: string;
                columnGroups: {
                    labelShown: string;
                    actionLabelShown: string;
                    labelHidden: string;
                    actionLabelHidden: string;
                };
            };
            showNumberedColumn: string;
            showStripedRows: string;
            showOutlines: string;
            frameOutlines: string;
            frameOutlinesMetaCopy: string;
            tooltip: string;
            "aria-toggle-table-settings": string;
        };
        de: {
            title: string;
            resetAllChanges: string;
            columnOrder: {
                title: string;
                columnGroups: {
                    labelShown: string;
                    actionLabelShown: string;
                    labelHidden: string;
                    actionLabelHidden: string;
                };
            };
            showNumberedColumn: string;
            showStripedRows: string;
            showOutlines: string;
            frameOutlines: string;
            frameOutlinesMetaCopy: string;
            tooltip: string;
            "aria-toggle-table-settings": string;
        };
    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
    }>, never, "title" | "tooltip" | "showOutlines" | "resetAllChanges" | "columnOrder" | "showNumberedColumn" | "showStripedRows" | "frameOutlines" | "frameOutlinesMetaCopy" | "aria-toggle-table-settings" | "columnOrder.columnGroups.labelShown" | "columnOrder.columnGroups.actionLabelShown" | "columnOrder.columnGroups.labelHidden" | "columnOrder.columnGroups.actionLabelHidden" | "columnOrder.title" | "columnOrder.columnGroups", "title" | "tooltip" | "showOutlines" | "resetAllChanges" | "columnOrder" | "showNumberedColumn" | "showStripedRows" | "frameOutlines" | "frameOutlinesMetaCopy" | "aria-toggle-table-settings" | "columnOrder.columnGroups.labelShown" | "columnOrder.columnGroups.actionLabelShown" | "columnOrder.columnGroups.labelHidden" | "columnOrder.columnGroups.actionLabelHidden" | "columnOrder.title" | "columnOrder.columnGroups">;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("reset-all-changes" | "change-column-order" | "change-column-visibility" | "change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering")[], "reset-all-changes" | "change-column-order" | "change-column-visibility" | "change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    columns: {
        type: PropType<ColumnDefinition[]>;
        required: true;
    };
    showOutlines: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showStripes: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    enableOutlineFraming: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    enableRowNumbering: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & Readonly<{
    "onReset-all-changes"?: ((...args: any[]) => any) | undefined;
    "onChange-column-order"?: ((...args: any[]) => any) | undefined;
    "onChange-column-visibility"?: ((...args: any[]) => any) | undefined;
    "onChange-show-outlines"?: ((...args: any[]) => any) | undefined;
    "onChange-show-stripes"?: ((...args: any[]) => any) | undefined;
    "onChange-outline-framing"?: ((...args: any[]) => any) | undefined;
    "onChange-enable-row-numbering"?: ((...args: any[]) => any) | undefined;
}>, {
    showOutlines: boolean;
    showStripes: boolean;
    enableOutlineFraming: boolean;
    enableRowNumbering: boolean;
}, {}, {
    "mt-button": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        disabled?: boolean;
        variant?: "primary" | "secondary" | "critical" | "action";
        ghost?: boolean;
        size?: "x-small" | "small" | "default" | "large";
        square?: boolean;
        block?: boolean;
        link?: string;
        isLoading?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        size: "x-small" | "small" | "default" | "large";
        variant: "primary" | "secondary" | "critical" | "action";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        }> & {
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        };
    });
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    "mt-popover": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        title: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
        disableFloat: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: PropType<"auto" | "large" | "medium" | "small">;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
    }>, {
        goViewBack: () => void;
        currentView: import('vue').ComputedRef<import('../../../../overlay/mt-popover/mt-popover.interfaces').View>;
        activeView: import('vue').Ref<string, string>;
        changeView: (view: string) => void;
        allViews: import('vue').ComputedRef<import('../../../../overlay/mt-popover/mt-popover.interfaces').View[]>;
        viewTransition: import('vue').Ref<"slideIn" | "slideOut", "slideIn" | "slideOut">;
        MtPopover: import('vue').Ref<HTMLElement | null, HTMLElement | null>;
        closeFloatingUi: () => void;
        toggleFloatingUi: () => void;
        isOpened: import('vue').Ref<boolean, boolean>;
        mainComponentTag: import('vue').ComputedRef<"div" | "mt-floating-ui">;
        componentClasses: import('vue').ComputedRef<{
            [x: string]: boolean;
            "mt-popover--float": boolean;
            "is--open": boolean;
            "has--header": boolean;
        }>;
        showHeader: import('vue').ComputedRef<boolean>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "update:isOpened"[], "update:isOpened", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
        disableFloat: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: PropType<"auto" | "large" | "medium" | "small">;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
    }>> & Readonly<{
        "onUpdate:isOpened"?: ((...args: any[]) => any) | undefined;
    }>, {
        title: string;
        width: "small" | "auto" | "medium" | "large";
        childViews: import('../../../../overlay/mt-popover/mt-popover.interfaces').View[];
        disableFloat: boolean;
    }, {}, {
        "mt-text": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>, {}, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            identification(): string;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            hasError(): boolean;
            MtSwitchFieldClasses(): Record<string, boolean>[];
            errorClasses(): {
                "mt-field__error--move-up": boolean;
            }[];
            isDisabled(): boolean;
        }, {
            onChange(changeEvent: Event): void;
            onInheritanceRestore(event: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>> & Readonly<{}>, {
            name: string;
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            inheritedValue: boolean;
            bordered: boolean;
            removeTopMargin: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: import('vue').Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: import('vue').Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-button": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: Readonly<{
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            }> & {
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            };
        });
        "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>> & Readonly<{}>, {
            options: Record<string, any>;
            tag: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-floating-ui": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<{
                    placement?: import('@floating-ui/utils').Placement | undefined;
                    strategy?: import('@floating-ui/utils').Strategy | undefined;
                    middleware?: (false | {
                        name: string;
                        options?: any;
                        fn: (state: {
                            placement: import('@floating-ui/utils').Placement;
                            platform: import('@floating-ui/core').Platform;
                            strategy: import('@floating-ui/utils').Strategy;
                            x: number;
                            y: number;
                            middlewareData: import('@floating-ui/core').MiddlewareData;
                            initialPlacement: import('@floating-ui/utils').Placement;
                            rects: import('@floating-ui/utils').ElementRects;
                            elements: import('@floating-ui/dom').Elements;
                        }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                    } | null | undefined)[];
                    platform?: import('@floating-ui/dom').Platform | undefined;
                }>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<Partial<{
                    ancestorScroll: boolean;
                    ancestorResize: boolean;
                    elementResize: boolean;
                    layoutShift: boolean;
                    animationFrame: boolean;
                }>>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                close: () => any;
            }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
                floatingUi: HTMLDivElement;
                floatingUiTrigger: HTMLDivElement;
                floatingUiContent: HTMLDivElement;
                floatingUiArrow: HTMLDivElement;
            }, HTMLDivElement, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<{
                    placement?: import('@floating-ui/utils').Placement | undefined;
                    strategy?: import('@floating-ui/utils').Strategy | undefined;
                    middleware?: (false | {
                        name: string;
                        options?: any;
                        fn: (state: {
                            placement: import('@floating-ui/utils').Placement;
                            platform: import('@floating-ui/core').Platform;
                            strategy: import('@floating-ui/utils').Strategy;
                            x: number;
                            y: number;
                            middlewareData: import('@floating-ui/core').MiddlewareData;
                            initialPlacement: import('@floating-ui/utils').Placement;
                            rects: import('@floating-ui/utils').ElementRects;
                            elements: import('@floating-ui/dom').Elements;
                        }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                    } | null | undefined)[];
                    platform?: import('@floating-ui/dom').Platform | undefined;
                }>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<Partial<{
                    ancestorScroll: boolean;
                    ancestorResize: boolean;
                    elementResize: boolean;
                    layoutShift: boolean;
                    animationFrame: boolean;
                }>>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, {}>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            close: () => any;
        }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                trigger?(_: {}): any;
                default?(_: {}): any;
            };
        });
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        emitChangeCheckbox: (changeValue: boolean) => void;
        emitChangeSwitch: (changeValue: boolean) => void;
        emitVisibilityChange: (changeValue: boolean) => void;
        emitClickOptions: () => void;
        componentClasses: import('vue').ComputedRef<{
            "mt-popover-item--default": boolean;
            "mt-popover-item--critical": boolean;
            "mt-popover-item--active": boolean;
            "mt-popover-item--disabled": boolean;
            "mt-popover-item--border-top": boolean;
            "mt-popover-item--border-bottom": boolean;
            "mt-popover-item--clickable": boolean;
        }>;
        labelClasses: import('vue').ComputedRef<{
            "mt-popover-item__label--clickable": boolean;
        }>;
        onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
        handleLableClick: () => void;
        isClickable: import('vue').ComputedRef<boolean>;
        iconClasses: import('vue').ComputedRef<{
            "mt-popover-item__icon--clickable": boolean;
        }>;
        id: string;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{
        "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
        "onChange-switch"?: ((...args: any[]) => any) | undefined;
        "onChange-visibility"?: ((...args: any[]) => any) | undefined;
        "onClick-options"?: ((...args: any[]) => any) | undefined;
    }>, {
        type: import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType;
        disabled: boolean;
        icon: string;
        role: string;
        visible: boolean;
        showCheckbox: boolean;
        checkboxChecked: boolean;
        checkboxPartial: boolean;
        onLabelClick: (() => void) | undefined;
        metaCopy: string;
        contextualDetail: string;
        shortcut: string;
        showSwitch: boolean;
        switchValue: boolean;
        showVisibility: boolean;
        showOptions: boolean;
        optionsCount: number;
        borderTop: boolean;
        borderBottom: boolean;
        isOptionItem: boolean;
    }, {}, {
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>, {}, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            identification(): string;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            hasError(): boolean;
            MtSwitchFieldClasses(): Record<string, boolean>[];
            errorClasses(): {
                "mt-field__error--move-up": boolean;
            }[];
            isDisabled(): boolean;
        }, {
            onChange(changeEvent: Event): void;
            onInheritanceRestore(event: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>> & Readonly<{}>, {
            name: string;
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            inheritedValue: boolean;
            bordered: boolean;
            removeTopMargin: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-popover-item-result": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        options: {
            type: PropType<ItemResultOption[]>;
            required: true;
        };
        groups: {
            type: PropType<import('../../../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
            required: false;
            default: () => never[];
        };
        hideSearch: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>, {
        getOptionsForGroup: (groupId: string | undefined) => ItemResultOption[];
        getDragConfigForOption: (option: ItemResultOption) => {
            disabled: boolean;
            delay?: number | undefined;
            dragGroup?: string | number | undefined;
            draggableCls?: string | undefined;
            draggingStateCls?: string | undefined;
            dragElementCls?: string | undefined;
            validDragCls?: string | undefined;
            invalidDragCls?: string | undefined;
            preventEvent?: boolean | undefined;
            validateDrop?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null) => boolean) | null | undefined;
            validateDrag?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null) => boolean) | null | undefined;
            validateDragStart?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, el: HTMLElement, event: MouseEvent | TouchEvent) => boolean) | null | undefined;
            onDragStart?: ((dragConfig: import('../../../../../directives/dragdrop.directive').DragConfig<ItemResultOption & {
                dropZone?: "before" | "after";
            }>, el: HTMLElement, dragElement: HTMLElement) => void) | null | undefined;
            onDragEnter?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, valid: boolean) => void) | null | undefined;
            onDragLeave?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null) => void) | null | undefined;
            onDrop?: ((dragConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null) => void) | null | undefined;
            data?: (ItemResultOption & {
                dropZone?: "before" | "after";
            }) | null | undefined;
        };
        isOptionDraggable: (option: ItemResultOption) => boolean | undefined;
        getIconForOption: (option: ItemResultOption) => "solid-grip-vertical-s" | "solid-thumbtack" | undefined;
        dropConfig: Partial<import('../../../../../directives/dragdrop.directive').DropConfig<unknown> & {
            dropZone?: "before" | "after";
        }>;
        dragConfig: Partial<import('../../../../../directives/dragdrop.directive').DragConfig<ItemResultOption & {
            dropZone?: "before" | "after";
        }>>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order")[], "search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        options: {
            type: PropType<ItemResultOption[]>;
            required: true;
        };
        groups: {
            type: PropType<import('../../../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
            required: false;
            default: () => never[];
        };
        hideSearch: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & Readonly<{
        "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
        "onChange-visibility"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onClick-group-action"?: ((...args: any[]) => any) | undefined;
        "onClick-option"?: ((...args: any[]) => any) | undefined;
        "onChange-order"?: ((...args: any[]) => any) | undefined;
    }>, {
        draggable: boolean;
        groups: import('../../../../overlay/mt-popover-item-result/mt-popover-item-result').Group[];
        hideSearch: boolean;
        selectable: boolean;
        hidable: boolean;
    }, {}, {
        "mt-search": import('vue').DefineComponent<{
            modelValue?: string;
            placeholder?: string;
            size?: "small" | "default";
            disabled?: boolean;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            "update:modelValue": (value: string) => any;
            change: (value: string) => any;
        }, string, import('vue').PublicProps, Readonly<{
            modelValue?: string;
            placeholder?: string;
            size?: "small" | "default";
            disabled?: boolean;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
            onChange?: ((value: string) => any) | undefined;
        }>, {
            size: "small" | "default";
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: import('../../../../overlay/mt-popover-item/mt-popover-item').MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: import('vue').Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: import('vue').Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>> & Readonly<{}>, {
            options: Record<string, any>;
            tag: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-text": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
    }, {
        draggable: import('vue').Directive;
        droppable: import('vue').Directive;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
}, {
    tooltip: import('vue').ObjectDirective<any, any, string, string>;
}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
