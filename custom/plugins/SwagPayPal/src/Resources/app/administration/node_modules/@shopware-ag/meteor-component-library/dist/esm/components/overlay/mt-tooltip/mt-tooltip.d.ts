import { Placement } from '@floating-ui/vue';
type __VLS_Props = {
    content: string;
    delayDurationInMs?: number;
    hideDelayDurationInMs?: number;
    placement?: Placement;
};
declare function onBlur(event: FocusEvent): void;
declare function onMouseover(): void;
declare function onMouseleave(): void;
declare function onMousedown(): void;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {
            id: string;
            onFocus: () => void;
            onBlur: typeof onBlur;
            onKeydown: (event: KeyboardEvent) => void;
            onMouseover: typeof onMouseover;
            onMouseleave: typeof onMouseleave;
            onMousedown: typeof onMousedown;
            onMouseup: () => void;
            'aria-describedby': string | null;
        }): any;
    };
    refs: {
        tooltipRef: HTMLDivElement;
        arrowRef: SVGSVGElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {
    placement: Placement;
    delayDurationInMs: number;
    hideDelayDurationInMs: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    tooltipRef: HTMLDivElement;
    arrowRef: SVGSVGElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
