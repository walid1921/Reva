declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    index: {
        type: NumberConstructor;
        required: true;
    };
    item: {
        type: ObjectConstructor;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    descriptionPosition: {
        type: StringConstructor;
        required: false;
        default: string;
        validator(value: string): boolean;
    };
}>, {
    addActiveItemListener: ((listener: (index: number) => void) => void) | undefined;
    removeActiveItemListener: ((listener: (index: number) => void) => void) | undefined;
    addItemSelectByKeyboardListener: ((listener: (index: number) => void) => void) | undefined;
    removeItemSelectByKeyboardListener: ((listener: (index: number) => void) => void) | undefined;
}, {
    active: boolean;
}, {
    resultClasses(): (string | {
        [className: string]: boolean;
        "is--active": boolean;
        "is--disabled": boolean;
        "has--description": boolean;
    })[];
    hasDescriptionSlot(): boolean;
}, {
    checkIfSelected(selectedItemIndex: number): void;
    checkIfActive(activeItemIndex: number): void;
    onClickResult(): void;
    onMouseEnter(): void;
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    index: {
        type: NumberConstructor;
        required: true;
    };
    item: {
        type: ObjectConstructor;
        required: true;
    };
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    descriptionPosition: {
        type: StringConstructor;
        required: false;
        default: string;
        validator(value: string): boolean;
    };
}>> & Readonly<{}>, {
    disabled: boolean;
    selected: boolean;
    descriptionPosition: string;
}, {}, {
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
