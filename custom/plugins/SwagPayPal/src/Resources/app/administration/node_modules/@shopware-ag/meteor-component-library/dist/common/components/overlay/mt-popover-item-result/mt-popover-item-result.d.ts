import { PropType } from 'vue';
import { DropConfig, DragConfig } from '../../../directives/dragdrop.directive';
export interface Option {
    id: string;
    label: string;
    metaCopy?: string;
    contextualDetail?: string;
    parentGroup?: string;
    position?: number;
    isVisible?: boolean;
    isSelected?: boolean;
    isClickable?: boolean;
    isHidable?: boolean;
    isSortable?: boolean;
    disabled?: boolean;
}
export interface Group {
    id: string;
    label: string;
    actionLabel?: string;
}
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    options: {
        type: PropType<Option[]>;
        required: true;
    };
    groups: {
        type: PropType<Group[]>;
        required: false;
        default: () => never[];
    };
    hideSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    getOptionsForGroup: (groupId: string | undefined) => Option[];
    getDragConfigForOption: (option: Option) => {
        disabled: boolean;
        delay?: number | undefined;
        dragGroup?: string | number | undefined;
        draggableCls?: string | undefined;
        draggingStateCls?: string | undefined;
        dragElementCls?: string | undefined;
        validDragCls?: string | undefined;
        invalidDragCls?: string | undefined;
        preventEvent?: boolean | undefined;
        validateDrop?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, dropConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null) => boolean) | null | undefined;
        validateDrag?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, dropConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null) => boolean) | null | undefined;
        validateDragStart?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, el: HTMLElement, event: MouseEvent | TouchEvent) => boolean) | null | undefined;
        onDragStart?: ((dragConfig: DragConfig<Option & {
            dropZone?: "before" | "after";
        }>, el: HTMLElement, dragElement: HTMLElement) => void) | null | undefined;
        onDragEnter?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, dropConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, valid: boolean) => void) | null | undefined;
        onDragLeave?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, dropConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null) => void) | null | undefined;
        onDrop?: ((dragConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null, dropConfigData: (Option & {
            dropZone?: "before" | "after";
        }) | null) => void) | null | undefined;
        data?: (Option & {
            dropZone?: "before" | "after";
        }) | null | undefined;
    };
    isOptionDraggable: (option: Option) => boolean | undefined;
    getIconForOption: (option: Option) => "solid-grip-vertical-s" | "solid-thumbtack" | undefined;
    dropConfig: Partial<DropConfig<unknown> & {
        dropZone?: "before" | "after";
    }>;
    dragConfig: Partial<DragConfig<Option & {
        dropZone?: "before" | "after";
    }>>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order")[], "search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    options: {
        type: PropType<Option[]>;
        required: true;
    };
    groups: {
        type: PropType<Group[]>;
        required: false;
        default: () => never[];
    };
    hideSearch: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidable: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
    "onChange-visibility"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onClick-group-action"?: ((...args: any[]) => any) | undefined;
    "onClick-option"?: ((...args: any[]) => any) | undefined;
    "onChange-order"?: ((...args: any[]) => any) | undefined;
}>, {
    draggable: boolean;
    groups: Group[];
    hideSearch: boolean;
    selectable: boolean;
    hidable: boolean;
}, {}, {
    "mt-search": import('vue').DefineComponent<{
        modelValue?: string;
        placeholder?: string;
        size?: "small" | "default";
        disabled?: boolean;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
        change: (value: string) => any;
    }, string, import('vue').PublicProps, Readonly<{
        modelValue?: string;
        placeholder?: string;
        size?: "small" | "default";
        disabled?: boolean;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: string) => any) | undefined;
    }>, {
        size: "small" | "default";
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
    "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<import('../mt-popover-item/mt-popover-item').MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        emitChangeCheckbox: (changeValue: boolean) => void;
        emitChangeSwitch: (changeValue: boolean) => void;
        emitVisibilityChange: (changeValue: boolean) => void;
        emitClickOptions: () => void;
        componentClasses: import('vue').ComputedRef<{
            "mt-popover-item--default": boolean;
            "mt-popover-item--critical": boolean;
            "mt-popover-item--active": boolean;
            "mt-popover-item--disabled": boolean;
            "mt-popover-item--border-top": boolean;
            "mt-popover-item--border-bottom": boolean;
            "mt-popover-item--clickable": boolean;
        }>;
        labelClasses: import('vue').ComputedRef<{
            "mt-popover-item__label--clickable": boolean;
        }>;
        onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
        handleLableClick: () => void;
        isClickable: import('vue').ComputedRef<boolean>;
        iconClasses: import('vue').ComputedRef<{
            "mt-popover-item__icon--clickable": boolean;
        }>;
        id: string;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<import('../mt-popover-item/mt-popover-item').MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{
        "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
        "onChange-switch"?: ((...args: any[]) => any) | undefined;
        "onChange-visibility"?: ((...args: any[]) => any) | undefined;
        "onClick-options"?: ((...args: any[]) => any) | undefined;
    }>, {
        type: import('../mt-popover-item/mt-popover-item').MtPopoverItemType;
        disabled: boolean;
        icon: string;
        role: string;
        visible: boolean;
        showCheckbox: boolean;
        checkboxChecked: boolean;
        checkboxPartial: boolean;
        onLabelClick: (() => void) | undefined;
        metaCopy: string;
        contextualDetail: string;
        shortcut: string;
        showSwitch: boolean;
        switchValue: boolean;
        showVisibility: boolean;
        showOptions: boolean;
        optionsCount: number;
        borderTop: boolean;
        borderBottom: boolean;
        isOptionItem: boolean;
    }, {}, {
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>, {}, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            identification(): string;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            hasError(): boolean;
            MtSwitchFieldClasses(): Record<string, boolean>[];
            errorClasses(): {
                "mt-field__error--move-up": boolean;
            }[];
            isDisabled(): boolean;
        }, {
            onChange(changeEvent: Event): void;
            onInheritanceRestore(event: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>> & Readonly<{}>, {
            name: string;
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            inheritedValue: boolean;
            bordered: boolean;
            removeTopMargin: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: import('vue').Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ObjectConstructor;
            required: false;
            default: () => {
                property: string[];
                transition: string;
            };
        };
    }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ObjectConstructor;
            required: false;
            default: () => {
                property: string[];
                transition: string;
            };
        };
    }>> & Readonly<{}>, {
        options: Record<string, any>;
        tag: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-text": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
            required: false;
            default: string;
        };
        weight: {
            type: PropType<"bold" | "semibold" | "medium" | "regular">;
            required: false;
            default: string;
        };
        color: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        as: {
            type: PropType<string | import('vue').Component>;
            required: false;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        color: string;
        size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
        weight: "bold" | "semibold" | "medium" | "regular";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
}, {
    draggable: import('vue').Directive;
    droppable: import('vue').Directive;
}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
