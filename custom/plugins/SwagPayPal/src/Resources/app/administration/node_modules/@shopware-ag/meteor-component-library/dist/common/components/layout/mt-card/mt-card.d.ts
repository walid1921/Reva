type __VLS_Props = {
    title?: string;
    subtitle?: string;
    isLoading?: boolean;
    large?: boolean;
    inheritance?: boolean;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        title(): void;
        subtitle(): void;
        avatar(): void;
        grid(): void;
        footer(): void;
        default(): void;
        toolbar(): void;
        tabs(): void;
        "before-card"(): void;
        "after-card"(): void;
        headerRight(): void;
        "context-actions"(): void;
    }> & {
        title(): void;
        subtitle(): void;
        avatar(): void;
        grid(): void;
        footer(): void;
        default(): void;
        toolbar(): void;
        tabs(): void;
        "before-card"(): void;
        "after-card"(): void;
        headerRight(): void;
        "context-actions"(): void;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_Props, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
    "update:inheritance": (value: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_Props> & Readonly<{
    "onUpdate:inheritance"?: ((value: boolean) => any) | undefined;
}>, {
    inheritance: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
