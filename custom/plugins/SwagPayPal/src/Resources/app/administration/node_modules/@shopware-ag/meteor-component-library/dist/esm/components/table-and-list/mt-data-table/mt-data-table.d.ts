import { PropType, Ref } from 'vue';
import { MtPopoverItemType } from '../../overlay/mt-popover-item/mt-popover-item';
import { DropConfig, DragConfig } from '../../../directives/dragdrop.directive';
import { TextColumnDefinition } from './renderer/mt-data-table-text-renderer';
import { NumberColumnDefinition } from './renderer/mt-data-table-number-renderer';
import { BadgeColumnDefinition } from './renderer/mt-data-table-badge-renderer';
import { PriceColumnDefinition } from './renderer/mt-data-table-price-renderer';
import { SegmentedControlActionsProp } from '../../navigation/mt-segmented-control/mt-segmented-control';
import { Filter } from './mt-data-table.interfaces';
export interface BaseColumnDefinition {
    label: string;
    property: string;
    position: number;
    sortable?: boolean;
    width?: number;
    allowResize?: boolean;
    cellWrap?: "nowrap" | "normal";
    visible?: boolean;
}
export type ColumnDefinition = BadgeColumnDefinition | TextColumnDefinition | NumberColumnDefinition | PriceColumnDefinition;
export interface ColumnChanges {
    property?: ColumnDefinition["property"];
    position?: ColumnDefinition["position"];
    width?: ColumnDefinition["width"];
    visible?: ColumnDefinition["visible"];
}
type DataSourcePropType = {
    id: string;
    [key: string]: unknown;
}[];
type ColumnProperty = ColumnDefinition[];
/**
 * @experimental - This component can be used but there are no guarantees for API stability yet.
 */
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * The data source which contains the data for the current
     * state of the table.
     */
    dataSource: {
        type: PropType<DataSourcePropType>;
        required: true;
    };
    /**
     * The defintions for the columns which should be displayed in the table.
     */
    columns: {
        type: PropType<ColumnProperty>;
        required: true;
        validator: (columnsValue: Record<string, unknown>[]) => boolean;
    };
    /**
     * Optional property. When you want to override the current column
     * information with the given changes, you can pass them here.
     * The changes will be applied to the current column information.
     * This is useful for saving and loading the current column configuration
     * when the user customizes the table.
     */
    columnChanges: {
        type: PropType<Record<string, ColumnChanges>>;
        required: false;
        default: () => {};
    };
    /**
     * Define the title of the table.
     */
    title: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * Define the subtitle of the table.
     */
    subtitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * The layout of the data table.
     * @values default, full
     */
    layout: {
        type: PropType<"default" | "full">;
        required: false;
        default: string;
    };
    /**
     * Activate the reload button at the top right corner of the table.
     */
    enableReload: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Define the current page of the table.
     */
    currentPage: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the limit of items per page.
     */
    paginationLimit: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the total amount of items.
     */
    paginationTotalItems: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the available pagination limits.
     */
    paginationOptions: {
        type: PropType<number[]>;
        required: false;
        default: () => number[];
    };
    /**
     * Define the current sort by property.
     */
    sortBy: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * Define the current sort direction.
     */
    sortDirection: {
        type: PropType<"ASC" | "DESC">;
        required: false;
        default: string;
    };
    /**
     * If active then the search input will be disabled.
     */
    disableSearch: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Define the current search value.
     */
    searchValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * If active then the table will be in loading state.
     */
    isLoading: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * If active user can select rows and can perform actions on them.
     */
    allowRowSelection: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selectedRows: {
        type: PropType<string[]>;
        required: false;
        default: () => never[];
    };
    /**
     * If active user can do bulk edit by selecting items
     */
    allowBulkEdit: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * If active user can do bulk delete by selecting items
     */
    allowBulkDelete: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Add more custom bulk edit actions
     */
    bulkEditMoreActions: {
        type: PropType<{
            id: string;
            label: string;
            onClick: () => void;
            icon?: "default" | "critical" | "active" | string;
            type?: MtPopoverItemType;
            metaCopy?: string;
            contextualDetail?: string;
        }[]>;
        required: false;
        default: () => never[];
    };
    /***
     * Enable numbered rows
     */
    enableRowNumbering: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable the stripe design for the table.
     */
    showStripes: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable outlines for the table.
     */
    showOutlines: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable outline framing on hover
     */
    enableOutlineFraming: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to delete items
     */
    disableDelete: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to edit items
     */
    disableEdit: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to settings table
     */
    disableSettingsTable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Caption for accessibility
     */
    caption: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * All available filters
     */
    filters: {
        type: PropType<Filter[]>;
        required: false;
        default: () => never[];
    };
    /**
     * Filters in use by the user
     */
    appliedFilters: {
        type: PropType<Filter[]>;
        required: false;
        default: () => never[];
    };
    /**
     * Displays how many results are found
     */
    numberOfResults: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}>, {
    t: import('vue-i18n').ComposerTranslation<{
        en: {
            itemsPerPage: string;
            filter: {
                numberOfResults: string;
                addFilter: string;
                fetchingFilteredResults: string;
            };
            columnSettings: {
                sortAscending: string;
                sortDescending: string;
                hideColumn: string;
            };
            addColumnIndicator: {
                popoverTitle: string;
                tooltipMessage: string;
            };
            contextButtons: {
                edit: string;
                delete: string;
            };
            emptyState: {
                headline: string;
                description: string;
            };
            bulkEdit: {
                itemsSelected: string;
                edit: string;
                delete: string;
                more: string;
            };
            reload: {
                tooltip: string;
            };
        };
        de: {
            itemsPerPage: string;
            filter: {
                numberOfResults: string;
                addFilter: string;
                fetchingFilteredResults: string;
            };
            columnSettings: {
                sortAscending: string;
                sortDescending: string;
                hideColumn: string;
            };
            addColumnIndicator: {
                popoverTitle: string;
                tooltipMessage: string;
            };
            contextButtons: {
                edit: string;
                delete: string;
            };
            emptyState: {
                headline: string;
                description: string;
            };
            bulkEdit: {
                itemsSelected: string;
                edit: string;
                delete: string;
                more: string;
            };
            reload: {
                tooltip: string;
            };
        };
    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
    }>, never, "filter" | "reload" | "itemsPerPage" | "columnSettings" | "addColumnIndicator" | "contextButtons" | "emptyState" | "bulkEdit" | "filter.numberOfResults" | "filter.addFilter" | "filter.fetchingFilteredResults" | "reload.tooltip" | "columnSettings.sortAscending" | "columnSettings.sortDescending" | "columnSettings.hideColumn" | "addColumnIndicator.popoverTitle" | "addColumnIndicator.tooltipMessage" | "contextButtons.delete" | "contextButtons.edit" | "emptyState.description" | "emptyState.headline" | "bulkEdit.delete" | "bulkEdit.edit" | "bulkEdit.itemsSelected" | "bulkEdit.more", "filter" | "reload" | "itemsPerPage" | "columnSettings" | "addColumnIndicator" | "contextButtons" | "emptyState" | "bulkEdit" | "filter.numberOfResults" | "filter.addFilter" | "filter.fetchingFilteredResults" | "reload.tooltip" | "columnSettings.sortAscending" | "columnSettings.sortDescending" | "columnSettings.hideColumn" | "addColumnIndicator.popoverTitle" | "addColumnIndicator.tooltipMessage" | "contextButtons.delete" | "contextButtons.edit" | "emptyState.description" | "emptyState.headline" | "bulkEdit.delete" | "bulkEdit.edit" | "bulkEdit.itemsSelected" | "bulkEdit.more">;
    sortedColumns: import('vue').ComputedRef<ColumnDefinition[]>;
    isFirstVisibleColumn: (column: ColumnDefinition) => boolean;
    addColumnOptions: import('vue').ComputedRef<{
        id: string;
        label: string;
        parentGroup: undefined;
        position: number;
        isVisible: boolean;
        isClickable: boolean;
        isSortable: boolean;
        isHidable: boolean;
        disabled: boolean;
    }[]>;
    renderColumnDataCellStyle: (column: ColumnDefinition) => {
        width: string;
        "min-width": string;
        "max-width": string;
        "white-space": "nowrap" | "normal";
    };
    renderColumnHeaderStyle: (column: ColumnDefinition) => {
        "max-width": string;
        width: string;
        "min-width": string;
        "white-space": "nowrap" | "normal";
    };
    tableWrapper: Ref<any, any>;
    emitReload: () => void;
    emitPaginationLimitChange: (limitValue: number) => void;
    emitPaginationCurrentPageChange: (currentPage: number) => void;
    emitSearchValueChange: (searchValue: string) => void;
    paginationOptionsConverted: import('vue').ComputedRef<{
        id: number;
        label: string;
        value: number;
    }[]>;
    startColumnResizing: (column: ColumnDefinition | null) => void;
    columnHeaderRefs: Ref<Record<string, HTMLElement>, Record<string, HTMLElement>>;
    columnDataCellRefs: Ref<Record<string, HTMLElement[]>, Record<string, HTMLElement[]>>;
    setColumnDataCellRefs: ({ el, column, index, }: {
        el?: HTMLElement;
        column: ColumnDefinition;
        index: number;
    }) => void;
    dataTable: Ref<HTMLElement | null>;
    dragConfig: Partial<DragConfig<ColumnDefinition & {
        dropZone?: "before" | "after";
    }>>;
    dropConfig: Partial<DropConfig<unknown> & {
        dropZone?: "before" | "after";
    }>;
    resetAllChanges: () => void;
    changeColumnPosition: (columnId: string, targetColumnId: string, insertPosition?: "before" | "after") => void;
    isColumnVisible: (column: ColumnDefinition) => boolean;
    changeColumnVisibility: (columnProperty: string, visibility: boolean) => void;
    emitSortChange: (property: string, direction: "ASC" | "DESC") => void;
    onColumnSettingsSortChange: (property: string, direction: "ASC" | "DESC", chainMethod?: () => void) => void;
    MtDataTableClasses: import('vue').ComputedRef<{
        "mt-data-table__layout-default": boolean;
        "mt-data-table__layout-full": boolean;
        "mt-data-table__first-column-fixed": boolean;
        "mt-data-table__last-column-fixed": boolean;
        "mt-data-table__stripes": boolean;
        "mt-data-table__outlines": boolean;
        "mt-data-table__column-outline-framing-active": boolean;
    }>;
    tableStylingVariables: import('vue').ComputedRef<{
        "--fixed-left-column-width": string;
        "--fixed-right-column-width": string;
    }>;
    getSelectionValue: (dataId: string) => boolean;
    onRowSelect: (dataId: string) => void;
    somethingSelected: import('vue').ComputedRef<boolean>;
    bulkEditSegmentedControlActions: import('vue').ComputedRef<SegmentedControlActionsProp>;
    handleSelectAll: () => void;
    highlightedColumn: Ref<string | null, string | null>;
    setHighlightedColumn: (column: ColumnDefinition | null) => void;
    getColumnDataCellClasses: (column: ColumnDefinition) => string[];
    getColumnHeaderClasses: (column: ColumnDefinition) => string[];
    getPreviousVisibleColumn: (column: ColumnDefinition) => ColumnDefinition | null;
    getColumnDataRowClasses: (rowId: string) => string[];
    getColumnHeaderInnerWrapperClasses: (column: ColumnDefinition) => string[];
    forceHighlightedColumn: Ref<boolean, boolean>;
    addColumnOptionsSearch: Ref<string, string>;
    onAddColumnOptionClick: (columnProperty: string, previousColumnProperty: string) => void;
    onAddColumnSearch: (value: string) => void;
    currentHoveredColumn: Ref<string | null, string | null>;
    currentHoveredRow: Ref<string | null, string | null>;
    setCurrentHoveredCell: (columnProperty: string | null, rowId: string) => void;
    isPrimaryColumn: (column: ColumnDefinition) => boolean;
    emptyData: import('vue').ComputedRef<{}[]>;
    getRealIndex: (index: number) => number;
    isDragging: Ref<boolean, boolean>;
    filterChildViews: import('vue').ComputedRef<{
        name: string;
        title: string;
    }[]>;
    removeFilter: (id: string) => void;
    addOption: (filterId: string, optionId: string) => void;
    removeOption: (filterId: string, optionId: string) => void;
    isOptionSelected: (filterId: string, optionId: string) => boolean;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering" | "reload" | "pagination-limit-change" | "pagination-current-page-change" | "search-value-change" | "sort-change" | "open-details" | "selection-change" | "multiple-selection-change" | "bulk-edit" | "bulk-delete" | "item-delete" | "update:appliedFilters")[], "change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering" | "reload" | "pagination-limit-change" | "pagination-current-page-change" | "search-value-change" | "sort-change" | "open-details" | "selection-change" | "multiple-selection-change" | "bulk-edit" | "bulk-delete" | "item-delete" | "update:appliedFilters", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * The data source which contains the data for the current
     * state of the table.
     */
    dataSource: {
        type: PropType<DataSourcePropType>;
        required: true;
    };
    /**
     * The defintions for the columns which should be displayed in the table.
     */
    columns: {
        type: PropType<ColumnProperty>;
        required: true;
        validator: (columnsValue: Record<string, unknown>[]) => boolean;
    };
    /**
     * Optional property. When you want to override the current column
     * information with the given changes, you can pass them here.
     * The changes will be applied to the current column information.
     * This is useful for saving and loading the current column configuration
     * when the user customizes the table.
     */
    columnChanges: {
        type: PropType<Record<string, ColumnChanges>>;
        required: false;
        default: () => {};
    };
    /**
     * Define the title of the table.
     */
    title: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * Define the subtitle of the table.
     */
    subtitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * The layout of the data table.
     * @values default, full
     */
    layout: {
        type: PropType<"default" | "full">;
        required: false;
        default: string;
    };
    /**
     * Activate the reload button at the top right corner of the table.
     */
    enableReload: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Define the current page of the table.
     */
    currentPage: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the limit of items per page.
     */
    paginationLimit: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the total amount of items.
     */
    paginationTotalItems: {
        type: NumberConstructor;
        required: true;
    };
    /**
     * Define the available pagination limits.
     */
    paginationOptions: {
        type: PropType<number[]>;
        required: false;
        default: () => number[];
    };
    /**
     * Define the current sort by property.
     */
    sortBy: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * Define the current sort direction.
     */
    sortDirection: {
        type: PropType<"ASC" | "DESC">;
        required: false;
        default: string;
    };
    /**
     * If active then the search input will be disabled.
     */
    disableSearch: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Define the current search value.
     */
    searchValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * If active then the table will be in loading state.
     */
    isLoading: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * If active user can select rows and can perform actions on them.
     */
    allowRowSelection: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selectedRows: {
        type: PropType<string[]>;
        required: false;
        default: () => never[];
    };
    /**
     * If active user can do bulk edit by selecting items
     */
    allowBulkEdit: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * If active user can do bulk delete by selecting items
     */
    allowBulkDelete: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Add more custom bulk edit actions
     */
    bulkEditMoreActions: {
        type: PropType<{
            id: string;
            label: string;
            onClick: () => void;
            icon?: "default" | "critical" | "active" | string;
            type?: MtPopoverItemType;
            metaCopy?: string;
            contextualDetail?: string;
        }[]>;
        required: false;
        default: () => never[];
    };
    /***
     * Enable numbered rows
     */
    enableRowNumbering: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable the stripe design for the table.
     */
    showStripes: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable outlines for the table.
     */
    showOutlines: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Enable or disable outline framing on hover
     */
    enableOutlineFraming: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to delete items
     */
    disableDelete: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to edit items
     */
    disableEdit: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Disable the possibility to settings table
     */
    disableSettingsTable: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Caption for accessibility
     */
    caption: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * All available filters
     */
    filters: {
        type: PropType<Filter[]>;
        required: false;
        default: () => never[];
    };
    /**
     * Filters in use by the user
     */
    appliedFilters: {
        type: PropType<Filter[]>;
        required: false;
        default: () => never[];
    };
    /**
     * Displays how many results are found
     */
    numberOfResults: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}>> & Readonly<{
    "onChange-show-outlines"?: ((...args: any[]) => any) | undefined;
    "onChange-show-stripes"?: ((...args: any[]) => any) | undefined;
    "onChange-outline-framing"?: ((...args: any[]) => any) | undefined;
    "onChange-enable-row-numbering"?: ((...args: any[]) => any) | undefined;
    onReload?: ((...args: any[]) => any) | undefined;
    "onPagination-limit-change"?: ((...args: any[]) => any) | undefined;
    "onPagination-current-page-change"?: ((...args: any[]) => any) | undefined;
    "onSearch-value-change"?: ((...args: any[]) => any) | undefined;
    "onSort-change"?: ((...args: any[]) => any) | undefined;
    "onOpen-details"?: ((...args: any[]) => any) | undefined;
    "onSelection-change"?: ((...args: any[]) => any) | undefined;
    "onMultiple-selection-change"?: ((...args: any[]) => any) | undefined;
    "onBulk-edit"?: ((...args: any[]) => any) | undefined;
    "onBulk-delete"?: ((...args: any[]) => any) | undefined;
    "onItem-delete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:appliedFilters"?: ((...args: any[]) => any) | undefined;
}>, {
    caption: string;
    title: string;
    filters: Filter[];
    isLoading: boolean;
    subtitle: string;
    showOutlines: boolean;
    showStripes: boolean;
    enableOutlineFraming: boolean;
    enableRowNumbering: boolean;
    columnChanges: Record<string, ColumnChanges>;
    layout: "default" | "full";
    enableReload: boolean;
    paginationOptions: number[];
    sortBy: string;
    sortDirection: "ASC" | "DESC";
    disableSearch: boolean;
    searchValue: string;
    allowRowSelection: boolean;
    selectedRows: string[];
    allowBulkEdit: boolean;
    allowBulkDelete: boolean;
    bulkEditMoreActions: {
        id: string;
        label: string;
        onClick: () => void;
        icon?: "default" | "critical" | "active" | string;
        type?: MtPopoverItemType;
        metaCopy?: string;
        contextualDetail?: string;
    }[];
    disableDelete: boolean;
    disableEdit: boolean;
    disableSettingsTable: boolean;
    appliedFilters: Filter[];
    numberOfResults: number;
}, {}, {
    "mt-card": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            title?: string;
            subtitle?: string;
            isLoading?: boolean;
            large?: boolean;
            inheritance?: boolean;
        }> & Readonly<{
            "onUpdate:inheritance"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            "update:inheritance": (value: boolean) => any;
        }, import('vue').PublicProps, {
            inheritance: boolean;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            title?: string;
            subtitle?: string;
            isLoading?: boolean;
            large?: boolean;
            inheritance?: boolean;
        }> & Readonly<{
            "onUpdate:inheritance"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, {
            inheritance: boolean;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        title?: string;
        subtitle?: string;
        isLoading?: boolean;
        large?: boolean;
        inheritance?: boolean;
    }> & Readonly<{
        "onUpdate:inheritance"?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        "update:inheritance": (value: boolean) => any;
    }, string, {
        inheritance: boolean;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            title(): void;
            subtitle(): void;
            avatar(): void;
            grid(): void;
            footer(): void;
            default(): void;
            toolbar(): void;
            tabs(): void;
            "before-card"(): void;
            "after-card"(): void;
            headerRight(): void;
            "context-actions"(): void;
        }> & {
            title(): void;
            subtitle(): void;
            avatar(): void;
            grid(): void;
            footer(): void;
            default(): void;
            toolbar(): void;
            tabs(): void;
            "before-card"(): void;
            "after-card"(): void;
            headerRight(): void;
            "context-actions"(): void;
        };
    });
    "mt-button": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        disabled?: boolean;
        variant?: "primary" | "secondary" | "critical" | "action";
        ghost?: boolean;
        size?: "x-small" | "small" | "default" | "large";
        square?: boolean;
        block?: boolean;
        link?: string;
        isLoading?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        size: "x-small" | "small" | "default" | "large";
        variant: "primary" | "secondary" | "critical" | "action";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        }> & {
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        };
    });
    "mt-select": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        options: {
            type: ArrayConstructor;
            required: true;
        };
        enableMultiSelection: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: PropType<string | number | boolean | unknown[] | null | undefined>;
            required: false;
            default: null;
        };
        labelProperty: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueProperty: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueLimit: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isLoading: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideClearableButton: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        highlightSearchTerm: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        searchFunction: {
            type: FunctionConstructor;
            required: false;
            default({ options, labelProperty, searchTerm, }: {
                options: any;
                labelProperty: string;
                searchTerm: string;
            }): any;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        t: import('vue-i18n').ComposerTranslation<{
            en: {
                messageNoResults: string;
            };
            de: {
                messageNoResults: string;
            };
        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
        }>, never, "messageNoResults", "messageNoResults">;
    }, {
        searchTerm: string;
        limit: number;
    }, {
        visibleValues(): any[];
        totalValuesCount(): number;
        invisibleValueCount(): number;
        currentValue: {
            get(): string | number | boolean | unknown[] | null | undefined;
            set(newValue: string | number | boolean | unknown[] | null | undefined): void;
        };
        visibleResults(): any[];
        componentClasses(): Record<string, boolean>;
    }, {
        isSelected(item: any): boolean;
        addItem(item: any): void;
        remove(item: any): void;
        removeLastItem(): void;
        expandValueLimit(): void;
        onSearchTermChange: import('lodash').DebouncedFunc<(term: any) => void>;
        resetActiveItem(): void;
        onSelectExpanded(): void;
        onSelectCollapsed(): void;
        getKey(object: any, keyPath: string, defaultValue?: any): any;
        onClearSelection(): void;
        getFocusElement(): HTMLElement;
    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        options: {
            type: ArrayConstructor;
            required: true;
        };
        enableMultiSelection: {
            type: BooleanConstructor;
            default: boolean;
        };
        modelValue: {
            type: PropType<string | number | boolean | unknown[] | null | undefined>;
            required: false;
            default: null;
        };
        labelProperty: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueProperty: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueLimit: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isLoading: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hideClearableButton: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        highlightSearchTerm: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        searchFunction: {
            type: FunctionConstructor;
            required: false;
            default({ options, labelProperty, searchTerm, }: {
                options: any;
                labelProperty: string;
                searchTerm: string;
            }): any;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        small: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        small: boolean;
        label: string;
        modelValue: string | number | boolean | unknown[] | null | undefined;
        placeholder: string;
        disabled: boolean;
        error: Record<string, any>;
        isLoading: boolean;
        isInherited: boolean;
        isInheritanceField: boolean;
        disableInheritanceToggle: boolean;
        labelProperty: string;
        valueProperty: string;
        enableMultiSelection: boolean;
        valueLimit: number;
        hideClearableButton: boolean;
        highlightSearchTerm: boolean;
        searchFunction: Function;
    }, {}, {
        "mt-select-base": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: true;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showClearableButton: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {}, {
            expanded: boolean;
        }, {
            mtFieldClasses(): {
                "has--focus": boolean;
            };
        }, {
            toggleExpand(): void;
            expand(): void;
            collapse(event?: Event): void;
            focusPreviousFormElement(): void;
            listenToClickOutside(event: Event): void;
            computePath(event: Event): EventTarget[];
            emitClear(): void;
            focusParentSelect(event: KeyboardEvent): void;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: true;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showClearableButton: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            disabled: boolean;
            error: Record<string, any>;
            isLoading: boolean;
            isInherited: boolean;
            isInheritanceField: boolean;
            disableInheritanceToggle: boolean;
            showClearableButton: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-loader": import('vue').DefineComponent<{
                size?: `${string}px`;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                size?: `${string}px`;
            }> & Readonly<{}>, {
                size: `${string}px`;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-select-result-list": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            options: {
                type: ArrayConstructor;
                required: false;
                default(): never[];
            };
            emptyMessage: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            focusEl: {
                type: PropType<HTMLDocument | HTMLElement>;
                required: false;
                default(): Document;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            popoverClasses: {
                type: PropType<string[]>;
                required: false;
                default(): never[];
            };
            popoverResizeWidth: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            t: import('vue-i18n').ComposerTranslation<{
                en: {
                    messageNoResults: string;
                };
                de: {
                    messageNoResults: string;
                };
            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
            }>, never, "messageNoResults", "messageNoResults">;
            activeItemIndex: Ref<number, number>;
            emitActiveItemIndex: () => void;
            setActiveItemIndex: (index: number) => void;
            addToActiveItemChangeListeners: (listener: (index: number) => void) => void;
            removeActiveItemChangeListener: (listener: (index: number) => void) => void;
            addToItemSelectByKeyboardListeners: (listener: (index: number) => void) => void;
            removeItemSelectByKeyboardListener: (listener: (index: number) => void) => void;
        }, {
            activeItemChangeListeners: Array<(index: number) => void>;
            itemSelectByKeyboardListeners: Array<(index: number) => void>;
        }, {
            popoverClass(): string[];
        }, {
            addEventListeners(): void;
            removeEventListeners(): void;
            checkOutsideClick(event: MouseEvent): void;
            navigate({ key }: {
                key: string;
            }): void;
            navigateNext(): void;
            navigatePrevious(): void;
            updateScrollPosition(): void;
            emitClicked(): void;
            onScroll(event: UIEvent): void;
            getBottomDistance(element: Element): number;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            options: {
                type: ArrayConstructor;
                required: false;
                default(): never[];
            };
            emptyMessage: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            focusEl: {
                type: PropType<HTMLDocument | HTMLElement>;
                required: false;
                default(): Document;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            popoverClasses: {
                type: PropType<string[]>;
                required: false;
                default(): never[];
            };
            popoverResizeWidth: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            options: unknown[];
            isLoading: boolean;
            emptyMessage: string;
            focusEl: HTMLElement | HTMLDocument;
            popoverClasses: string[];
            popoverResizeWidth: boolean;
        }, {}, {
            "mt-popover-deprecated": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                zIndex: {
                    type: PropType<number | null>;
                    required: false;
                    default: null;
                };
                resizeWidth: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                popoverClass: {
                    type: PropType<string | unknown[] | Record<string, unknown>>;
                    required: false;
                    default: string;
                };
            }>, {}, {}, {
                componentStyle(): {
                    "z-Index": number | null;
                };
                popoverConfig(): {
                    active: boolean;
                    resizeWidth: boolean;
                };
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                zIndex: {
                    type: PropType<number | null>;
                    required: false;
                    default: null;
                };
                resizeWidth: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                popoverClass: {
                    type: PropType<string | unknown[] | Record<string, unknown>>;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                zIndex: number | null;
                resizeWidth: boolean;
                popoverClass: string | unknown[] | Record<string, unknown>;
            }, {}, {}, {
                popover: import('vue').Directive;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, () => {
            setActiveItemIndex: (index: number) => void;
        }, true, {}, any>;
        "mt-select-selection-list": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            selections: {
                type: PropType<Record<string, string>[]>;
                required: false;
                default: () => never[];
            };
            labelProperty: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueProperty: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            enableSearch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            invisibleCount: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            size: {
                type: PropType<"small" | "medium" | "default">;
                required: false;
                default: null;
            };
            alwaysShowPlaceholder: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            placeholder: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            searchTerm: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            selectionDisablingMethod: {
                type: PropType<(selection: Record<string, string>) => boolean>;
                required: false;
                default: () => boolean;
            };
            hideLabels: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            multiSelection: {
                type: BooleanConstructor;
                required: true;
            };
            disableInput: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {}, {}, {
            classBindings(): {
                "mt-select-selection-list--single": boolean;
            };
            showPlaceholder(): string;
        }, {
            isSelectionDisabled(selection: Record<string, string>): boolean;
            onClickInvisibleCount(): void;
            onSearchTermChange(event: Event): void;
            onKeyDownDelete(): void;
            onClickDismiss(item: any): void;
            focus(): void;
            blur(): void;
            select(): void;
            getFocusEl(): unknown;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            selections: {
                type: PropType<Record<string, string>[]>;
                required: false;
                default: () => never[];
            };
            labelProperty: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueProperty: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            enableSearch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            invisibleCount: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            size: {
                type: PropType<"small" | "medium" | "default">;
                required: false;
                default: null;
            };
            alwaysShowPlaceholder: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            placeholder: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isLoading: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            searchTerm: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            selectionDisablingMethod: {
                type: PropType<(selection: Record<string, string>) => boolean>;
                required: false;
                default: () => boolean;
            };
            hideLabels: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            multiSelection: {
                type: BooleanConstructor;
                required: true;
            };
            disableInput: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            size: "small" | "default" | "medium";
            placeholder: string;
            disabled: boolean;
            isLoading: boolean;
            selections: Record<string, string>[];
            labelProperty: string;
            valueProperty: string;
            enableSearch: boolean;
            invisibleCount: number;
            alwaysShowPlaceholder: boolean;
            searchTerm: string;
            selectionDisablingMethod: (selection: Record<string, string>) => boolean;
            hideLabels: boolean;
            disableInput: boolean;
        }, {}, {
            "mt-label": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    variant?: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                    size?: "small" | "medium" | "default";
                    appearance?: "default" | "pill" | "circle" | "badged";
                    ghost?: boolean;
                    caps?: boolean;
                    dismissable?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    size: "small" | "medium" | "default";
                    variant: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                    ghost: boolean;
                    appearance: "default" | "pill" | "circle" | "badged";
                    caps: boolean;
                }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    variant?: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                    size?: "small" | "medium" | "default";
                    appearance?: "default" | "pill" | "circle" | "badged";
                    ghost?: boolean;
                    caps?: boolean;
                    dismissable?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "small" | "medium" | "default";
                    variant: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                    ghost: boolean;
                    appearance: "default" | "pill" | "circle" | "badged";
                    caps: boolean;
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                variant?: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                size?: "small" | "medium" | "default";
                appearance?: "default" | "pill" | "circle" | "badged";
                ghost?: boolean;
                caps?: boolean;
                dismissable?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                size: "small" | "medium" | "default";
                variant: "info" | "danger" | "success" | "warning" | "neutral" | "primary";
                ghost: boolean;
                appearance: "default" | "pill" | "circle" | "badged";
                caps: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                    'dismiss-icon'?(_: {}): any;
                };
            });
            "mt-button": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                }> & {
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                };
            });
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-highlight-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            searchTerm: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            text: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {}, {
            searchAndReplace(): string;
            escapeRegExp(string: string): string;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            searchTerm: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            text: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            text: string;
            searchTerm: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-select-result": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            index: {
                type: NumberConstructor;
                required: true;
            };
            item: {
                type: ObjectConstructor;
                required: true;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            selected: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            descriptionPosition: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
        }>, {
            addActiveItemListener: ((listener: (index: number) => void) => void) | undefined;
            removeActiveItemListener: ((listener: (index: number) => void) => void) | undefined;
            addItemSelectByKeyboardListener: ((listener: (index: number) => void) => void) | undefined;
            removeItemSelectByKeyboardListener: ((listener: (index: number) => void) => void) | undefined;
        }, {
            active: boolean;
        }, {
            resultClasses(): (string | {
                [className: string]: boolean;
                "is--active": boolean;
                "is--disabled": boolean;
                "has--description": boolean;
            })[];
            hasDescriptionSlot(): boolean;
        }, {
            checkIfSelected(selectedItemIndex: number): void;
            checkIfActive(activeItemIndex: number): void;
            onClickResult(): void;
            onMouseEnter(): void;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            index: {
                type: NumberConstructor;
                required: true;
            };
            item: {
                type: ObjectConstructor;
                required: true;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            selected: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            descriptionPosition: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
        }>> & Readonly<{}>, {
            disabled: boolean;
            selected: boolean;
            descriptionPosition: string;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    "mt-pagination": import('vue').DefineComponent<{
        currentPage: number;
        limit: number;
        totalItems: number;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        "change-current-page": (value: number) => any;
    }, string, import('vue').PublicProps, Readonly<{
        currentPage: number;
        limit: number;
        totalItems: number;
    }> & Readonly<{
        "onChange-current-page"?: ((value: number) => any) | undefined;
    }>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
    "mt-search": import('vue').DefineComponent<{
        modelValue?: string;
        placeholder?: string;
        size?: "small" | "default";
        disabled?: boolean;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        "update:modelValue": (value: string) => any;
        change: (value: string) => any;
    }, string, import('vue').PublicProps, Readonly<{
        modelValue?: string;
        placeholder?: string;
        size?: "small" | "default";
        disabled?: boolean;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onChange?: ((value: string) => any) | undefined;
    }>, {
        size: "small" | "default";
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
    "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        partial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        checkboxClasses: import('vue').ComputedRef<{
            "mt-switch--future-remove-default-margin": boolean;
        }>;
    }, {
        id: string | undefined;
        currentValue: boolean | undefined;
    }, {
        MtCheckboxFieldClasses(): {
            "has--error": boolean;
            "is--disabled": boolean;
            "is--inherited": boolean;
            "is--bordered": boolean;
            "is--partly-checked": boolean;
        };
        identification(): string;
        hasError(): boolean;
        inputState(): boolean;
        isInheritanceField(): boolean;
        isInherited(): boolean;
        isDisabled(): boolean;
        isPartlyChecked(): boolean;
        iconName(): string;
    }, {
        onChange(changeEvent: Event): void;
    }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {}, {
        formFieldName(): string | undefined;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        mapInheritance: Record<string, any>;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        partial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        required: boolean;
        label: string;
        disabled: boolean;
        error: Record<string, any>;
        helpText: string;
        checked: boolean;
        partial: boolean;
        inheritedValue: boolean;
        bordered: boolean;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {
            hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
            future: {
                removeCardWidth: boolean;
                removeDefaultMargin: boolean;
            };
        }, {
            id: string | undefined;
        }, {
            identification(): string;
            showLabel(): boolean;
            mtFieldLabelClasses(): {
                "is--required": boolean;
            };
            mtBlockSize(): string;
            hasError(): boolean;
        }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>, {}, {}, {
            isValid(): boolean;
        }, {
            validate(value: unknown): boolean;
            validateRule(value: unknown, rule: string): boolean;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            validation: string | boolean | Record<string, any> | unknown[];
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            size: string;
            required: boolean;
            disabled: boolean;
            isInherited: boolean;
            copyableText: string;
            isInheritanceField: boolean;
            disableInheritanceToggle: boolean;
            copyable: boolean;
            copyableTooltip: boolean;
            helpText: string;
        }, {}, {
            "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                t: import('vue-i18n').ComposerTranslation<{
                    en: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                    de: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                    [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                onClickRemoveInheritance: () => void;
                onClickRestoreInheritance: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                disabled: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>> & Readonly<{}>, {
                text: string;
                width: number;
                showDelay: number;
                hideDelay: number;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                copyToClipboard: () => void;
                tooltipText: import('vue').ComputedRef<string>;
                wasCopied: Ref<boolean, boolean>;
            }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                createNotification(): void;
                createNotificationSuccess(config: any): void;
                createNotificationInfo(config: any): void;
                createNotificationWarning(config: any): void;
                createNotificationError(config: any): void;
                createSystemNotificationSuccess(config: any): void;
                createSystemNotificationInfo(config: any): void;
                createSystemNotificationWarning(config: any): void;
                createSystemNotificationError(config: any): void;
                createSystemNotification(config: any): void;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                tooltip: boolean;
                copyableText: string;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-field-error": import('vue').DefineComponent<{
            error?: Record<string, any> | null;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            error?: Record<string, any> | null;
        }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-context-button": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        menuWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        menuHorizontalAlign: {
            type: PropType<"right" | "left">;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        menuVerticalAlign: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasError: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        autoClose: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
    }>, {}, {}, {
        contextClass(): {
            "is--disabled": boolean;
            "has--error": boolean;
        };
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        menuWidth: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        menuHorizontalAlign: {
            type: PropType<"right" | "left">;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        menuVerticalAlign: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasError: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        autoClose: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        title: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
    }>> & Readonly<{}>, {
        title: string;
        hasError: boolean;
        disabled: boolean;
        icon: string;
        childViews: import('../../overlay/mt-popover/mt-popover.interfaces').View[];
        menuWidth: number;
        menuHorizontalAlign: "left" | "right";
        menuVerticalAlign: string;
        autoClose: boolean;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-popover": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>, {
            goViewBack: () => void;
            currentView: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View>;
            activeView: Ref<string, string>;
            changeView: (view: string) => void;
            allViews: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            viewTransition: Ref<"slideIn" | "slideOut", "slideIn" | "slideOut">;
            MtPopover: Ref<HTMLElement | null, HTMLElement | null>;
            closeFloatingUi: () => void;
            toggleFloatingUi: () => void;
            isOpened: Ref<boolean, boolean>;
            mainComponentTag: import('vue').ComputedRef<"div" | "mt-floating-ui">;
            componentClasses: import('vue').ComputedRef<{
                [x: string]: boolean;
                "mt-popover--float": boolean;
                "is--open": boolean;
                "has--header": boolean;
            }>;
            showHeader: import('vue').ComputedRef<boolean>;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "update:isOpened"[], "update:isOpened", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>> & Readonly<{
            "onUpdate:isOpened"?: ((...args: any[]) => any) | undefined;
        }>, {
            title: string;
            width: "small" | "auto" | "medium" | "large";
            childViews: import('../../overlay/mt-popover/mt-popover.interfaces').View[];
            disableFloat: boolean;
        }, {}, {
            "mt-text": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                emitChangeCheckbox: (changeValue: boolean) => void;
                emitChangeSwitch: (changeValue: boolean) => void;
                emitVisibilityChange: (changeValue: boolean) => void;
                emitClickOptions: () => void;
                componentClasses: import('vue').ComputedRef<{
                    "mt-popover-item--default": boolean;
                    "mt-popover-item--critical": boolean;
                    "mt-popover-item--active": boolean;
                    "mt-popover-item--disabled": boolean;
                    "mt-popover-item--border-top": boolean;
                    "mt-popover-item--border-bottom": boolean;
                    "mt-popover-item--clickable": boolean;
                }>;
                labelClasses: import('vue').ComputedRef<{
                    "mt-popover-item__label--clickable": boolean;
                }>;
                onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
                handleLableClick: () => void;
                isClickable: import('vue').ComputedRef<boolean>;
                iconClasses: import('vue').ComputedRef<{
                    "mt-popover-item__icon--clickable": boolean;
                }>;
                id: string;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{
                "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
                "onChange-switch"?: ((...args: any[]) => any) | undefined;
                "onChange-visibility"?: ((...args: any[]) => any) | undefined;
                "onClick-options"?: ((...args: any[]) => any) | undefined;
            }>, {
                type: MtPopoverItemType;
                disabled: boolean;
                icon: string;
                role: string;
                visible: boolean;
                showCheckbox: boolean;
                checkboxChecked: boolean;
                checkboxPartial: boolean;
                onLabelClick: (() => void) | undefined;
                metaCopy: string;
                contextualDetail: string;
                shortcut: string;
                showSwitch: boolean;
                switchValue: boolean;
                showVisibility: boolean;
                showOptions: boolean;
                optionsCount: number;
                borderTop: boolean;
                borderBottom: boolean;
                isOptionItem: boolean;
            }, {}, {
                "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    checkboxClasses: import('vue').ComputedRef<{
                        "mt-switch--future-remove-default-margin": boolean;
                    }>;
                }, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    MtCheckboxFieldClasses(): {
                        "has--error": boolean;
                        "is--disabled": boolean;
                        "is--inherited": boolean;
                        "is--bordered": boolean;
                        "is--partly-checked": boolean;
                    };
                    identification(): string;
                    hasError(): boolean;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    isDisabled(): boolean;
                    isPartlyChecked(): boolean;
                    iconName(): string;
                }, {
                    onChange(changeEvent: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    partial: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>, {}, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    identification(): string;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    hasError(): boolean;
                    MtSwitchFieldClasses(): Record<string, boolean>[];
                    errorClasses(): {
                        "mt-field__error--move-up": boolean;
                    }[];
                    isDisabled(): boolean;
                }, {
                    onChange(changeEvent: Event): void;
                    onInheritanceRestore(event: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                    removeTopMargin: boolean;
                }, {}, {
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-button": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                }> & {
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                };
            });
            "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>> & Readonly<{}>, {
                options: Record<string, any>;
                tag: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-floating-ui": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                    close: () => any;
                }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
                    floatingUi: HTMLDivElement;
                    floatingUiTrigger: HTMLDivElement;
                    floatingUiContent: HTMLDivElement;
                    floatingUiArrow: HTMLDivElement;
                }, HTMLDivElement, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                close: () => any;
            }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    trigger?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-data-table-settings": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        columns: {
            type: PropType<ColumnDefinition[]>;
            required: true;
        };
        showOutlines: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showStripes: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        enableOutlineFraming: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        enableRowNumbering: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        tableSettingsChildViews: import('vue').ComputedRef<{
            name: string;
            title: string;
        }[]>;
        resetAllChanges: () => void;
        columnGroups: import('vue').ComputedRef<{
            id: string;
            label: string;
            actionLabel: string;
        }[]>;
        columnOrderOptions: import('vue').ComputedRef<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[]>;
        onColumnChangeVisibility: (columnProperty: string, visibility: boolean) => void;
        onColumnClickGroupAction: (groupId: string) => void;
        onColumnChangeOrder: ({ itemId, dropZone, dropId, }: {
            itemId?: string;
            dropZone: "before" | "after";
            dropId?: string;
        }) => void;
        isPrimaryColumn: (column: ColumnDefinition) => boolean;
        t: import('vue-i18n').ComposerTranslation<{
            en: {
                title: string;
                resetAllChanges: string;
                columnOrder: {
                    title: string;
                    columnGroups: {
                        labelShown: string;
                        actionLabelShown: string;
                        labelHidden: string;
                        actionLabelHidden: string;
                    };
                };
                showNumberedColumn: string;
                showStripedRows: string;
                showOutlines: string;
                frameOutlines: string;
                frameOutlinesMetaCopy: string;
                tooltip: string;
                "aria-toggle-table-settings": string;
            };
            de: {
                title: string;
                resetAllChanges: string;
                columnOrder: {
                    title: string;
                    columnGroups: {
                        labelShown: string;
                        actionLabelShown: string;
                        labelHidden: string;
                        actionLabelHidden: string;
                    };
                };
                showNumberedColumn: string;
                showStripedRows: string;
                showOutlines: string;
                frameOutlines: string;
                frameOutlinesMetaCopy: string;
                tooltip: string;
                "aria-toggle-table-settings": string;
            };
        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
        }>, never, "title" | "tooltip" | "showOutlines" | "resetAllChanges" | "columnOrder" | "showNumberedColumn" | "showStripedRows" | "frameOutlines" | "frameOutlinesMetaCopy" | "aria-toggle-table-settings" | "columnOrder.columnGroups.labelShown" | "columnOrder.columnGroups.actionLabelShown" | "columnOrder.columnGroups.labelHidden" | "columnOrder.columnGroups.actionLabelHidden" | "columnOrder.title" | "columnOrder.columnGroups", "title" | "tooltip" | "showOutlines" | "resetAllChanges" | "columnOrder" | "showNumberedColumn" | "showStripedRows" | "frameOutlines" | "frameOutlinesMetaCopy" | "aria-toggle-table-settings" | "columnOrder.columnGroups.labelShown" | "columnOrder.columnGroups.actionLabelShown" | "columnOrder.columnGroups.labelHidden" | "columnOrder.columnGroups.actionLabelHidden" | "columnOrder.title" | "columnOrder.columnGroups">;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("reset-all-changes" | "change-column-order" | "change-column-visibility" | "change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering")[], "reset-all-changes" | "change-column-order" | "change-column-visibility" | "change-show-outlines" | "change-show-stripes" | "change-outline-framing" | "change-enable-row-numbering", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        columns: {
            type: PropType<ColumnDefinition[]>;
            required: true;
        };
        showOutlines: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showStripes: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        enableOutlineFraming: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        enableRowNumbering: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{
        "onReset-all-changes"?: ((...args: any[]) => any) | undefined;
        "onChange-column-order"?: ((...args: any[]) => any) | undefined;
        "onChange-column-visibility"?: ((...args: any[]) => any) | undefined;
        "onChange-show-outlines"?: ((...args: any[]) => any) | undefined;
        "onChange-show-stripes"?: ((...args: any[]) => any) | undefined;
        "onChange-outline-framing"?: ((...args: any[]) => any) | undefined;
        "onChange-enable-row-numbering"?: ((...args: any[]) => any) | undefined;
    }>, {
        showOutlines: boolean;
        showStripes: boolean;
        enableOutlineFraming: boolean;
        enableRowNumbering: boolean;
    }, {}, {
        "mt-button": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: Readonly<{
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            }> & {
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            };
        });
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-popover": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>, {
            goViewBack: () => void;
            currentView: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View>;
            activeView: Ref<string, string>;
            changeView: (view: string) => void;
            allViews: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            viewTransition: Ref<"slideIn" | "slideOut", "slideIn" | "slideOut">;
            MtPopover: Ref<HTMLElement | null, HTMLElement | null>;
            closeFloatingUi: () => void;
            toggleFloatingUi: () => void;
            isOpened: Ref<boolean, boolean>;
            mainComponentTag: import('vue').ComputedRef<"div" | "mt-floating-ui">;
            componentClasses: import('vue').ComputedRef<{
                [x: string]: boolean;
                "mt-popover--float": boolean;
                "is--open": boolean;
                "has--header": boolean;
            }>;
            showHeader: import('vue').ComputedRef<boolean>;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "update:isOpened"[], "update:isOpened", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>> & Readonly<{
            "onUpdate:isOpened"?: ((...args: any[]) => any) | undefined;
        }>, {
            title: string;
            width: "small" | "auto" | "medium" | "large";
            childViews: import('../../overlay/mt-popover/mt-popover.interfaces').View[];
            disableFloat: boolean;
        }, {}, {
            "mt-text": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                emitChangeCheckbox: (changeValue: boolean) => void;
                emitChangeSwitch: (changeValue: boolean) => void;
                emitVisibilityChange: (changeValue: boolean) => void;
                emitClickOptions: () => void;
                componentClasses: import('vue').ComputedRef<{
                    "mt-popover-item--default": boolean;
                    "mt-popover-item--critical": boolean;
                    "mt-popover-item--active": boolean;
                    "mt-popover-item--disabled": boolean;
                    "mt-popover-item--border-top": boolean;
                    "mt-popover-item--border-bottom": boolean;
                    "mt-popover-item--clickable": boolean;
                }>;
                labelClasses: import('vue').ComputedRef<{
                    "mt-popover-item__label--clickable": boolean;
                }>;
                onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
                handleLableClick: () => void;
                isClickable: import('vue').ComputedRef<boolean>;
                iconClasses: import('vue').ComputedRef<{
                    "mt-popover-item__icon--clickable": boolean;
                }>;
                id: string;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{
                "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
                "onChange-switch"?: ((...args: any[]) => any) | undefined;
                "onChange-visibility"?: ((...args: any[]) => any) | undefined;
                "onClick-options"?: ((...args: any[]) => any) | undefined;
            }>, {
                type: MtPopoverItemType;
                disabled: boolean;
                icon: string;
                role: string;
                visible: boolean;
                showCheckbox: boolean;
                checkboxChecked: boolean;
                checkboxPartial: boolean;
                onLabelClick: (() => void) | undefined;
                metaCopy: string;
                contextualDetail: string;
                shortcut: string;
                showSwitch: boolean;
                switchValue: boolean;
                showVisibility: boolean;
                showOptions: boolean;
                optionsCount: number;
                borderTop: boolean;
                borderBottom: boolean;
                isOptionItem: boolean;
            }, {}, {
                "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    checkboxClasses: import('vue').ComputedRef<{
                        "mt-switch--future-remove-default-margin": boolean;
                    }>;
                }, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    MtCheckboxFieldClasses(): {
                        "has--error": boolean;
                        "is--disabled": boolean;
                        "is--inherited": boolean;
                        "is--bordered": boolean;
                        "is--partly-checked": boolean;
                    };
                    identification(): string;
                    hasError(): boolean;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    isDisabled(): boolean;
                    isPartlyChecked(): boolean;
                    iconName(): string;
                }, {
                    onChange(changeEvent: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    partial: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>, {}, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    identification(): string;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    hasError(): boolean;
                    MtSwitchFieldClasses(): Record<string, boolean>[];
                    errorClasses(): {
                        "mt-field__error--move-up": boolean;
                    }[];
                    isDisabled(): boolean;
                }, {
                    onChange(changeEvent: Event): void;
                    onInheritanceRestore(event: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                    removeTopMargin: boolean;
                }, {}, {
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-button": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                }> & {
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                };
            });
            "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>> & Readonly<{}>, {
                options: Record<string, any>;
                tag: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-floating-ui": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                    close: () => any;
                }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
                    floatingUi: HTMLDivElement;
                    floatingUiTrigger: HTMLDivElement;
                    floatingUiContent: HTMLDivElement;
                    floatingUiArrow: HTMLDivElement;
                }, HTMLDivElement, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                close: () => any;
            }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    trigger?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-popover-item-result": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            options: {
                type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[]>;
                required: true;
            };
            groups: {
                type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
                required: false;
                default: () => never[];
            };
            hideSearch: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectable: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidable: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>, {
            getOptionsForGroup: (groupId: string | undefined) => import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[];
            getDragConfigForOption: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => {
                disabled: boolean;
                delay?: number | undefined;
                dragGroup?: string | number | undefined;
                draggableCls?: string | undefined;
                draggingStateCls?: string | undefined;
                dragElementCls?: string | undefined;
                validDragCls?: string | undefined;
                invalidDragCls?: string | undefined;
                preventEvent?: boolean | undefined;
                validateDrop?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null) => boolean) | null | undefined;
                validateDrag?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null) => boolean) | null | undefined;
                validateDragStart?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, el: HTMLElement, event: MouseEvent | TouchEvent) => boolean) | null | undefined;
                onDragStart?: ((dragConfig: DragConfig<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }>, el: HTMLElement, dragElement: HTMLElement) => void) | null | undefined;
                onDragEnter?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, valid: boolean) => void) | null | undefined;
                onDragLeave?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null) => void) | null | undefined;
                onDrop?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null) => void) | null | undefined;
                data?: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                    dropZone?: "before" | "after";
                }) | null | undefined;
            };
            isOptionDraggable: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => boolean | undefined;
            getIconForOption: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => "solid-grip-vertical-s" | "solid-thumbtack" | undefined;
            dropConfig: Partial<DropConfig<unknown> & {
                dropZone?: "before" | "after";
            }>;
            dragConfig: Partial<DragConfig<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }>>;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order")[], "search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            options: {
                type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[]>;
                required: true;
            };
            groups: {
                type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
                required: false;
                default: () => never[];
            };
            hideSearch: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            selectable: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidable: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            "onClick-group-action"?: ((...args: any[]) => any) | undefined;
            "onClick-option"?: ((...args: any[]) => any) | undefined;
            "onChange-order"?: ((...args: any[]) => any) | undefined;
        }>, {
            draggable: boolean;
            groups: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[];
            hideSearch: boolean;
            selectable: boolean;
            hidable: boolean;
        }, {}, {
            "mt-search": import('vue').DefineComponent<{
                modelValue?: string;
                placeholder?: string;
                size?: "small" | "default";
                disabled?: boolean;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                "update:modelValue": (value: string) => any;
                change: (value: string) => any;
            }, string, import('vue').PublicProps, Readonly<{
                modelValue?: string;
                placeholder?: string;
                size?: "small" | "default";
                disabled?: boolean;
            }> & Readonly<{
                "onUpdate:modelValue"?: ((value: string) => any) | undefined;
                onChange?: ((value: string) => any) | undefined;
            }>, {
                size: "small" | "default";
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
            "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                emitChangeCheckbox: (changeValue: boolean) => void;
                emitChangeSwitch: (changeValue: boolean) => void;
                emitVisibilityChange: (changeValue: boolean) => void;
                emitClickOptions: () => void;
                componentClasses: import('vue').ComputedRef<{
                    "mt-popover-item--default": boolean;
                    "mt-popover-item--critical": boolean;
                    "mt-popover-item--active": boolean;
                    "mt-popover-item--disabled": boolean;
                    "mt-popover-item--border-top": boolean;
                    "mt-popover-item--border-bottom": boolean;
                    "mt-popover-item--clickable": boolean;
                }>;
                labelClasses: import('vue').ComputedRef<{
                    "mt-popover-item__label--clickable": boolean;
                }>;
                onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
                handleLableClick: () => void;
                isClickable: import('vue').ComputedRef<boolean>;
                iconClasses: import('vue').ComputedRef<{
                    "mt-popover-item__icon--clickable": boolean;
                }>;
                id: string;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{
                "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
                "onChange-switch"?: ((...args: any[]) => any) | undefined;
                "onChange-visibility"?: ((...args: any[]) => any) | undefined;
                "onClick-options"?: ((...args: any[]) => any) | undefined;
            }>, {
                type: MtPopoverItemType;
                disabled: boolean;
                icon: string;
                role: string;
                visible: boolean;
                showCheckbox: boolean;
                checkboxChecked: boolean;
                checkboxPartial: boolean;
                onLabelClick: (() => void) | undefined;
                metaCopy: string;
                contextualDetail: string;
                shortcut: string;
                showSwitch: boolean;
                switchValue: boolean;
                showVisibility: boolean;
                showOptions: boolean;
                optionsCount: number;
                borderTop: boolean;
                borderBottom: boolean;
                isOptionItem: boolean;
            }, {}, {
                "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    checkboxClasses: import('vue').ComputedRef<{
                        "mt-switch--future-remove-default-margin": boolean;
                    }>;
                }, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    MtCheckboxFieldClasses(): {
                        "has--error": boolean;
                        "is--disabled": boolean;
                        "is--inherited": boolean;
                        "is--bordered": boolean;
                        "is--partly-checked": boolean;
                    };
                    identification(): string;
                    hasError(): boolean;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    isDisabled(): boolean;
                    isPartlyChecked(): boolean;
                    iconName(): string;
                }, {
                    onChange(changeEvent: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    partial: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>, {}, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    identification(): string;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    hasError(): boolean;
                    MtSwitchFieldClasses(): Record<string, boolean>[];
                    errorClasses(): {
                        "mt-field__error--move-up": boolean;
                    }[];
                    isDisabled(): boolean;
                }, {
                    onChange(changeEvent: Event): void;
                    onInheritanceRestore(event: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                    removeTopMargin: boolean;
                }, {}, {
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>> & Readonly<{}>, {
                options: Record<string, any>;
                tag: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-text": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
        }, {
            draggable: import('vue').Directive;
            droppable: import('vue').Directive;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {
        tooltip: import('vue').ObjectDirective<any, any, string, string>;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-popover": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        title: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
        disableFloat: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: PropType<"auto" | "large" | "medium" | "small">;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
    }>, {
        goViewBack: () => void;
        currentView: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View>;
        activeView: Ref<string, string>;
        changeView: (view: string) => void;
        allViews: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
        viewTransition: Ref<"slideIn" | "slideOut", "slideIn" | "slideOut">;
        MtPopover: Ref<HTMLElement | null, HTMLElement | null>;
        closeFloatingUi: () => void;
        toggleFloatingUi: () => void;
        isOpened: Ref<boolean, boolean>;
        mainComponentTag: import('vue').ComputedRef<"div" | "mt-floating-ui">;
        componentClasses: import('vue').ComputedRef<{
            [x: string]: boolean;
            "mt-popover--float": boolean;
            "is--open": boolean;
            "has--header": boolean;
        }>;
        showHeader: import('vue').ComputedRef<boolean>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "update:isOpened"[], "update:isOpened", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        title: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        childViews: {
            type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            required: false;
            default: () => never[];
        };
        disableFloat: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        width: {
            type: PropType<"auto" | "large" | "medium" | "small">;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
    }>> & Readonly<{
        "onUpdate:isOpened"?: ((...args: any[]) => any) | undefined;
    }>, {
        title: string;
        width: "small" | "auto" | "medium" | "large";
        childViews: import('../../overlay/mt-popover/mt-popover.interfaces').View[];
        disableFloat: boolean;
    }, {}, {
        "mt-text": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>, {}, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            identification(): string;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            hasError(): boolean;
            MtSwitchFieldClasses(): Record<string, boolean>[];
            errorClasses(): {
                "mt-field__error--move-up": boolean;
            }[];
            isDisabled(): boolean;
        }, {
            onChange(changeEvent: Event): void;
            onInheritanceRestore(event: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>> & Readonly<{}>, {
            name: string;
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            inheritedValue: boolean;
            bordered: boolean;
            removeTopMargin: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-button": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: Readonly<{
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            }> & {
                default: null;
                iconFront: {
                    size: number;
                };
                iconBack: {
                    size: number;
                };
            };
        });
        "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>> & Readonly<{}>, {
            options: Record<string, any>;
            tag: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-floating-ui": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<{
                    placement?: import('@floating-ui/utils').Placement | undefined;
                    strategy?: import('@floating-ui/utils').Strategy | undefined;
                    middleware?: (false | {
                        name: string;
                        options?: any;
                        fn: (state: {
                            placement: import('@floating-ui/utils').Placement;
                            platform: import('@floating-ui/core').Platform;
                            strategy: import('@floating-ui/utils').Strategy;
                            x: number;
                            y: number;
                            middlewareData: import('@floating-ui/core').MiddlewareData;
                            initialPlacement: import('@floating-ui/utils').Placement;
                            rects: import('@floating-ui/utils').ElementRects;
                            elements: import('@floating-ui/dom').Elements;
                        }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                    } | null | undefined)[];
                    platform?: import('@floating-ui/dom').Platform | undefined;
                }>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<Partial<{
                    ancestorScroll: boolean;
                    ancestorResize: boolean;
                    elementResize: boolean;
                    layoutShift: boolean;
                    animationFrame: boolean;
                }>>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                close: () => any;
            }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
                floatingUi: HTMLDivElement;
                floatingUiTrigger: HTMLDivElement;
                floatingUiContent: HTMLDivElement;
                floatingUiArrow: HTMLDivElement;
            }, HTMLDivElement, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<{
                    placement?: import('@floating-ui/utils').Placement | undefined;
                    strategy?: import('@floating-ui/utils').Strategy | undefined;
                    middleware?: (false | {
                        name: string;
                        options?: any;
                        fn: (state: {
                            placement: import('@floating-ui/utils').Placement;
                            platform: import('@floating-ui/core').Platform;
                            strategy: import('@floating-ui/utils').Strategy;
                            x: number;
                            y: number;
                            middlewareData: import('@floating-ui/core').MiddlewareData;
                            initialPlacement: import('@floating-ui/utils').Placement;
                            rects: import('@floating-ui/utils').ElementRects;
                            elements: import('@floating-ui/dom').Elements;
                        }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                    } | null | undefined)[];
                    platform?: import('@floating-ui/dom').Platform | undefined;
                }>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<Partial<{
                    ancestorScroll: boolean;
                    ancestorResize: boolean;
                    elementResize: boolean;
                    layoutShift: boolean;
                    animationFrame: boolean;
                }>>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, {}>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            close: () => any;
        }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                trigger?(_: {}): any;
                default?(_: {}): any;
            };
        });
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        emitChangeCheckbox: (changeValue: boolean) => void;
        emitChangeSwitch: (changeValue: boolean) => void;
        emitVisibilityChange: (changeValue: boolean) => void;
        emitClickOptions: () => void;
        componentClasses: import('vue').ComputedRef<{
            "mt-popover-item--default": boolean;
            "mt-popover-item--critical": boolean;
            "mt-popover-item--active": boolean;
            "mt-popover-item--disabled": boolean;
            "mt-popover-item--border-top": boolean;
            "mt-popover-item--border-bottom": boolean;
            "mt-popover-item--clickable": boolean;
        }>;
        labelClasses: import('vue').ComputedRef<{
            "mt-popover-item__label--clickable": boolean;
        }>;
        onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
        handleLableClick: () => void;
        isClickable: import('vue').ComputedRef<boolean>;
        iconClasses: import('vue').ComputedRef<{
            "mt-popover-item__icon--clickable": boolean;
        }>;
        id: string;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        type: {
            type: PropType<MtPopoverItemType>;
            required: false;
            default: string;
            validator: (value: string) => boolean;
        };
        showCheckbox: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxChecked: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checkboxPartial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        onLabelClick: {
            type: PropType<(() => void) | undefined>;
            required: false;
            default: undefined;
        };
        metaCopy: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: false;
            default: string;
        };
        contextualDetail: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        shortcut: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        showSwitch: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        switchValue: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showVisibility: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        visible: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        showOptions: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        optionsCount: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
        borderTop: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        borderBottom: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        isOptionItem: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{
        "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
        "onChange-switch"?: ((...args: any[]) => any) | undefined;
        "onChange-visibility"?: ((...args: any[]) => any) | undefined;
        "onClick-options"?: ((...args: any[]) => any) | undefined;
    }>, {
        type: MtPopoverItemType;
        disabled: boolean;
        icon: string;
        role: string;
        visible: boolean;
        showCheckbox: boolean;
        checkboxChecked: boolean;
        checkboxPartial: boolean;
        onLabelClick: (() => void) | undefined;
        metaCopy: string;
        contextualDetail: string;
        shortcut: string;
        showSwitch: boolean;
        switchValue: boolean;
        showVisibility: boolean;
        showOptions: boolean;
        optionsCount: number;
        borderTop: boolean;
        borderBottom: boolean;
        isOptionItem: boolean;
    }, {}, {
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>, {}, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            identification(): string;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            hasError(): boolean;
            MtSwitchFieldClasses(): Record<string, boolean>[];
            errorClasses(): {
                "mt-field__error--move-up": boolean;
            }[];
            isDisabled(): boolean;
        }, {
            onChange(changeEvent: Event): void;
            onInheritanceRestore(event: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            required: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            removeTopMargin: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>> & Readonly<{}>, {
            name: string;
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            inheritedValue: boolean;
            bordered: boolean;
            removeTopMargin: boolean;
        }, {}, {
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-popover-item-result": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        options: {
            type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[]>;
            required: true;
        };
        groups: {
            type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
            required: false;
            default: () => never[];
        };
        hideSearch: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>, {
        getOptionsForGroup: (groupId: string | undefined) => import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[];
        getDragConfigForOption: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => {
            disabled: boolean;
            delay?: number | undefined;
            dragGroup?: string | number | undefined;
            draggableCls?: string | undefined;
            draggingStateCls?: string | undefined;
            dragElementCls?: string | undefined;
            validDragCls?: string | undefined;
            invalidDragCls?: string | undefined;
            preventEvent?: boolean | undefined;
            validateDrop?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null) => boolean) | null | undefined;
            validateDrag?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null) => boolean) | null | undefined;
            validateDragStart?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, el: HTMLElement, event: MouseEvent | TouchEvent) => boolean) | null | undefined;
            onDragStart?: ((dragConfig: DragConfig<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }>, el: HTMLElement, dragElement: HTMLElement) => void) | null | undefined;
            onDragEnter?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, valid: boolean) => void) | null | undefined;
            onDragLeave?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null) => void) | null | undefined;
            onDrop?: ((dragConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null, dropConfigData: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null) => void) | null | undefined;
            data?: (import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
                dropZone?: "before" | "after";
            }) | null | undefined;
        };
        isOptionDraggable: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => boolean | undefined;
        getIconForOption: (option: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option) => "solid-grip-vertical-s" | "solid-thumbtack" | undefined;
        dropConfig: Partial<DropConfig<unknown> & {
            dropZone?: "before" | "after";
        }>;
        dragConfig: Partial<DragConfig<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option & {
            dropZone?: "before" | "after";
        }>>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order")[], "search" | "change-checkbox" | "change-visibility" | "click-group-action" | "click-option" | "change-order", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        options: {
            type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Option[]>;
            required: true;
        };
        groups: {
            type: PropType<import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[]>;
            required: false;
            default: () => never[];
        };
        hideSearch: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & Readonly<{
        "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
        "onChange-visibility"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onClick-group-action"?: ((...args: any[]) => any) | undefined;
        "onClick-option"?: ((...args: any[]) => any) | undefined;
        "onChange-order"?: ((...args: any[]) => any) | undefined;
    }>, {
        draggable: boolean;
        groups: import('../../overlay/mt-popover-item-result/mt-popover-item-result').Group[];
        hideSearch: boolean;
        selectable: boolean;
        hidable: boolean;
    }, {}, {
        "mt-search": import('vue').DefineComponent<{
            modelValue?: string;
            placeholder?: string;
            size?: "small" | "default";
            disabled?: boolean;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            "update:modelValue": (value: string) => any;
            change: (value: string) => any;
        }, string, import('vue').PublicProps, Readonly<{
            modelValue?: string;
            placeholder?: string;
            size?: "small" | "default";
            disabled?: boolean;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: string) => any) | undefined;
            onChange?: ((value: string) => any) | undefined;
        }>, {
            size: "small" | "default";
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {
                    property: string[];
                    transition: string;
                };
            };
        }>> & Readonly<{}>, {
            options: Record<string, any>;
            tag: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-text": {
            new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }>;
            __isFragment?: never;
            __isTeleport?: never;
            __isSuspense?: never;
        } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
    }, {
        draggable: import('vue').Directive;
        droppable: import('vue').Directive;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-skeleton-bar": import('vue').DefineComponent<{}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, HTMLDivElement>;
    "mt-context-menu-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        type: {
            type: PropType<"default" | "active" | "critical">;
            required: false;
            default: string;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>, {
        handleLableClick: () => void;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "click"[], "click", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: PropType<string | import('vue-i18n').TranslateResult>;
            required: true;
        };
        icon: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        type: {
            type: PropType<"default" | "active" | "critical">;
            required: false;
            default: string;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & Readonly<{
        onClick?: ((...args: any[]) => any) | undefined;
    }>, {
        type: "default" | "critical" | "active";
        disabled: boolean;
        icon: string;
        role: string;
    }, {}, {
        "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            emitChangeCheckbox: (changeValue: boolean) => void;
            emitChangeSwitch: (changeValue: boolean) => void;
            emitVisibilityChange: (changeValue: boolean) => void;
            emitClickOptions: () => void;
            componentClasses: import('vue').ComputedRef<{
                "mt-popover-item--default": boolean;
                "mt-popover-item--critical": boolean;
                "mt-popover-item--active": boolean;
                "mt-popover-item--disabled": boolean;
                "mt-popover-item--border-top": boolean;
                "mt-popover-item--border-bottom": boolean;
                "mt-popover-item--clickable": boolean;
            }>;
            labelClasses: import('vue').ComputedRef<{
                "mt-popover-item__label--clickable": boolean;
            }>;
            onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
            handleLableClick: () => void;
            isClickable: import('vue').ComputedRef<boolean>;
            iconClasses: import('vue').ComputedRef<{
                "mt-popover-item__icon--clickable": boolean;
            }>;
            id: string;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: true;
            };
            type: {
                type: PropType<MtPopoverItemType>;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
            showCheckbox: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxChecked: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checkboxPartial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            onLabelClick: {
                type: PropType<(() => void) | undefined>;
                required: false;
                default: undefined;
            };
            metaCopy: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            contextualDetail: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            shortcut: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            showSwitch: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            switchValue: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showVisibility: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            visible: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            showOptions: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            optionsCount: {
                type: NumberConstructor;
                required: false;
                default: undefined;
            };
            borderTop: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            borderBottom: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            isOptionItem: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{
            "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
            "onChange-switch"?: ((...args: any[]) => any) | undefined;
            "onChange-visibility"?: ((...args: any[]) => any) | undefined;
            "onClick-options"?: ((...args: any[]) => any) | undefined;
        }>, {
            type: MtPopoverItemType;
            disabled: boolean;
            icon: string;
            role: string;
            visible: boolean;
            showCheckbox: boolean;
            checkboxChecked: boolean;
            checkboxPartial: boolean;
            onLabelClick: (() => void) | undefined;
            metaCopy: string;
            contextualDetail: string;
            shortcut: string;
            showSwitch: boolean;
            switchValue: boolean;
            showVisibility: boolean;
            showOptions: boolean;
            optionsCount: number;
            borderTop: boolean;
            borderBottom: boolean;
            isOptionItem: boolean;
        }, {}, {
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-floating-ui": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<{
                placement?: import('@floating-ui/utils').Placement | undefined;
                strategy?: import('@floating-ui/utils').Strategy | undefined;
                middleware?: (false | {
                    name: string;
                    options?: any;
                    fn: (state: {
                        placement: import('@floating-ui/utils').Placement;
                        platform: import('@floating-ui/core').Platform;
                        strategy: import('@floating-ui/utils').Strategy;
                        x: number;
                        y: number;
                        middlewareData: import('@floating-ui/core').MiddlewareData;
                        initialPlacement: import('@floating-ui/utils').Placement;
                        rects: import('@floating-ui/utils').ElementRects;
                        elements: import('@floating-ui/dom').Elements;
                    }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                } | null | undefined)[];
                platform?: import('@floating-ui/dom').Platform | undefined;
            }>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<Partial<{
                ancestorScroll: boolean;
                ancestorResize: boolean;
                elementResize: boolean;
                layoutShift: boolean;
                animationFrame: boolean;
            }>>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            close: () => any;
        }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
            floatingUi: HTMLDivElement;
            floatingUiTrigger: HTMLDivElement;
            floatingUiContent: HTMLDivElement;
            floatingUiArrow: HTMLDivElement;
        }, HTMLDivElement, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<{
                placement?: import('@floating-ui/utils').Placement | undefined;
                strategy?: import('@floating-ui/utils').Strategy | undefined;
                middleware?: (false | {
                    name: string;
                    options?: any;
                    fn: (state: {
                        placement: import('@floating-ui/utils').Placement;
                        platform: import('@floating-ui/core').Platform;
                        strategy: import('@floating-ui/utils').Strategy;
                        x: number;
                        y: number;
                        middlewareData: import('@floating-ui/core').MiddlewareData;
                        initialPlacement: import('@floating-ui/utils').Placement;
                        rects: import('@floating-ui/utils').ElementRects;
                        elements: import('@floating-ui/dom').Elements;
                    }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                } | null | undefined)[];
                platform?: import('@floating-ui/dom').Platform | undefined;
            }>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<Partial<{
                ancestorScroll: boolean;
                ancestorResize: boolean;
                elementResize: boolean;
                layoutShift: boolean;
                animationFrame: boolean;
            }>>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        isOpened: boolean;
        floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
        showArrow?: boolean;
        offset?: number;
        autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
    }> & Readonly<{
        onClose?: (() => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        close: () => any;
    }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            trigger?(_: {}): any;
            default?(_: {}): any;
        };
    });
    "mt-segmented-control": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        actions: {
            type: PropType<SegmentedControlActionsProp>;
            required: true;
        };
        disableContext: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        getActionClass: (action: import('../../navigation/mt-segmented-control/mt-segmented-control').SegmentedControlAction) => string[];
        handleClick: (action: import('../../navigation/mt-segmented-control/mt-segmented-control').SegmentedControlAction, toggleFloatingUi: () => void) => void;
        handleCheckboxChange: (action: import('../../navigation/mt-segmented-control/mt-segmented-control').SegmentedControlAction, checkboxValue: boolean) => void;
        segmentedControlClasses: import('vue').ComputedRef<Record<string, boolean>>;
        flatChildViews: (childViews?: import('../../overlay/mt-popover/mt-popover.interfaces').View[]) => import('../../overlay/mt-popover/mt-popover.interfaces').View[];
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, never[], never, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        actions: {
            type: PropType<SegmentedControlActionsProp>;
            required: true;
        };
        disableContext: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        disableContext: boolean;
    }, {}, {
        "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            checkboxClasses: import('vue').ComputedRef<{
                "mt-switch--future-remove-default-margin": boolean;
            }>;
        }, {
            id: string | undefined;
            currentValue: boolean | undefined;
        }, {
            MtCheckboxFieldClasses(): {
                "has--error": boolean;
                "is--disabled": boolean;
                "is--inherited": boolean;
                "is--bordered": boolean;
                "is--partly-checked": boolean;
            };
            identification(): string;
            hasError(): boolean;
            inputState(): boolean;
            isInheritanceField(): boolean;
            isInherited(): boolean;
            isDisabled(): boolean;
            isPartlyChecked(): boolean;
            iconName(): string;
        }, {
            onChange(changeEvent: Event): void;
        }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            checked: {
                type: BooleanConstructor;
                required: false;
                default: undefined;
            };
            partial: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            inheritedValue: {
                type: BooleanConstructor;
                required: false;
                default: null;
            };
            error: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            bordered: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            required: boolean;
            label: string;
            disabled: boolean;
            error: Record<string, any>;
            helpText: string;
            checked: boolean;
            partial: boolean;
            inheritedValue: boolean;
            bordered: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {
                hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                future: {
                    removeCardWidth: boolean;
                    removeDefaultMargin: boolean;
                };
            }, {
                id: string | undefined;
            }, {
                identification(): string;
                showLabel(): boolean;
                mtFieldLabelClasses(): {
                    "is--required": boolean;
                };
                mtBlockSize(): string;
                hasError(): boolean;
            }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                isValid(): boolean;
            }, {
                validate(value: unknown): boolean;
                validateRule(value: unknown, rule: string): boolean;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                validation: {
                    type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                validation: string | boolean | Record<string, any> | unknown[];
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInherited: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                isInheritanceField: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disableInheritanceToggle: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyable: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                copyableTooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                hasFocus: {
                    type: BooleanConstructor;
                    required: true;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                size: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                    validator(value: string): boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                size: string;
                required: boolean;
                disabled: boolean;
                isInherited: boolean;
                copyableText: string;
                isInheritanceField: boolean;
                disableInheritanceToggle: boolean;
                copyable: boolean;
                copyableTooltip: boolean;
                helpText: string;
            }, {}, {
                "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    t: import('vue-i18n').ComposerTranslation<{
                        en: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                        de: {
                            tooltipRemoveInheritance: string;
                            tooltipRestoreInheritance: string;
                        };
                    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                    }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                    onClickRemoveInheritance: () => void;
                    onClickRestoreInheritance: () => void;
                }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    isInherited: {
                        type: BooleanConstructor;
                        required: true;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    disabled: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: true;
                        default: string;
                    };
                    width: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    showDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                    hideDelay: {
                        type: NumberConstructor;
                        required: false;
                        default: number;
                    };
                }>> & Readonly<{}>, {
                    text: string;
                    width: number;
                    showDelay: number;
                    hideDelay: number;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    copyToClipboard: () => void;
                    tooltipText: import('vue').ComputedRef<string>;
                    wasCopied: Ref<boolean, boolean>;
                }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                    createNotification(): void;
                    createNotificationSuccess(config: any): void;
                    createNotificationInfo(config: any): void;
                    createNotificationWarning(config: any): void;
                    createNotificationError(config: any): void;
                    createSystemNotificationSuccess(config: any): void;
                    createSystemNotificationInfo(config: any): void;
                    createSystemNotificationWarning(config: any): void;
                    createSystemNotificationError(config: any): void;
                    createSystemNotification(config: any): void;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    tooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    tooltip: boolean;
                    copyableText: string;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {
                    tooltip: import('vue').ObjectDirective<any, any, string, string>;
                }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-error": import('vue').DefineComponent<{
                error?: Record<string, any> | null;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                error?: Record<string, any> | null;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-popover": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>, {
            goViewBack: () => void;
            currentView: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View>;
            activeView: Ref<string, string>;
            changeView: (view: string) => void;
            allViews: import('vue').ComputedRef<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
            viewTransition: Ref<"slideIn" | "slideOut", "slideIn" | "slideOut">;
            MtPopover: Ref<HTMLElement | null, HTMLElement | null>;
            closeFloatingUi: () => void;
            toggleFloatingUi: () => void;
            isOpened: Ref<boolean, boolean>;
            mainComponentTag: import('vue').ComputedRef<"div" | "mt-floating-ui">;
            componentClasses: import('vue').ComputedRef<{
                [x: string]: boolean;
                "mt-popover--float": boolean;
                "is--open": boolean;
                "has--header": boolean;
            }>;
            showHeader: import('vue').ComputedRef<boolean>;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, "update:isOpened"[], "update:isOpened", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            title: {
                type: PropType<string | import('vue-i18n').TranslateResult>;
                required: false;
                default: string;
            };
            childViews: {
                type: PropType<import('../../overlay/mt-popover/mt-popover.interfaces').View[]>;
                required: false;
                default: () => never[];
            };
            disableFloat: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            width: {
                type: PropType<"auto" | "large" | "medium" | "small">;
                required: false;
                default: string;
                validator: (value: string) => boolean;
            };
        }>> & Readonly<{
            "onUpdate:isOpened"?: ((...args: any[]) => any) | undefined;
        }>, {
            title: string;
            width: "small" | "auto" | "medium" | "large";
            childViews: import('../../overlay/mt-popover/mt-popover.interfaces').View[];
            disableFloat: boolean;
        }, {}, {
            "mt-text": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import('vue').ExtractPropTypes<{
                    size: {
                        type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                        required: false;
                        default: string;
                    };
                    weight: {
                        type: PropType<"bold" | "semibold" | "medium" | "regular">;
                        required: false;
                        default: string;
                    };
                    color: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    as: {
                        type: PropType<string | import('vue').Component>;
                        required: false;
                    };
                }>> & Readonly<{}>, {}, {}, {}, {}, {
                    color: string;
                    size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                    weight: "bold" | "semibold" | "medium" | "regular";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
                size: {
                    type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                    required: false;
                    default: string;
                };
                weight: {
                    type: PropType<"bold" | "semibold" | "medium" | "regular">;
                    required: false;
                    default: string;
                };
                color: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                as: {
                    type: PropType<string | import('vue').Component>;
                    required: false;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                color: string;
                size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
                weight: "bold" | "semibold" | "medium" | "regular";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
            "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                checkboxClasses: import('vue').ComputedRef<{
                    "mt-switch--future-remove-default-margin": boolean;
                }>;
            }, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                MtCheckboxFieldClasses(): {
                    "has--error": boolean;
                    "is--disabled": boolean;
                    "is--inherited": boolean;
                    "is--bordered": boolean;
                    "is--partly-checked": boolean;
                };
                identification(): string;
                hasError(): boolean;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                isDisabled(): boolean;
                isPartlyChecked(): boolean;
                iconName(): string;
            }, {
                onChange(changeEvent: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: undefined;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: undefined;
                };
                partial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                required: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                partial: boolean;
                inheritedValue: boolean;
                bordered: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>, {}, {
                id: string | undefined;
                currentValue: boolean | undefined;
            }, {
                identification(): string;
                inputState(): boolean;
                isInheritanceField(): boolean;
                isInherited(): boolean;
                hasError(): boolean;
                MtSwitchFieldClasses(): Record<string, boolean>[];
                errorClasses(): {
                    "mt-field__error--move-up": boolean;
                }[];
                isDisabled(): boolean;
            }, {
                onChange(changeEvent: Event): void;
                onInheritanceRestore(event: Event): void;
            }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>, {}, {}, {
                formFieldName(): string | undefined;
            }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                mapInheritance: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
            }>> & Readonly<{}>, {
                name: string;
                mapInheritance: Record<string, any>;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                required: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                checked: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                bordered: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                inheritedValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: null;
                };
                helpText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                error: {
                    type: ObjectConstructor;
                    required: false;
                    default: null;
                };
                removeTopMargin: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                name: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>> & Readonly<{}>, {
                name: string;
                required: boolean;
                label: string;
                disabled: boolean;
                error: Record<string, any>;
                helpText: string;
                checked: boolean;
                inheritedValue: boolean;
                bordered: boolean;
                removeTopMargin: boolean;
            }, {}, {
                "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {
                    hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                    future: {
                        removeCardWidth: boolean;
                        removeDefaultMargin: boolean;
                    };
                }, {
                    id: string | undefined;
                }, {
                    identification(): string;
                    showLabel(): boolean;
                    mtFieldLabelClasses(): {
                        "is--required": boolean;
                    };
                    mtBlockSize(): string;
                    hasError(): boolean;
                }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    isValid(): boolean;
                }, {
                    validate(value: unknown): boolean;
                    validateRule(value: unknown, rule: string): boolean;
                }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    validation: {
                        type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    validation: string | boolean | Record<string, any> | unknown[];
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInherited: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    isInheritanceField: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    disableInheritanceToggle: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyable: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    copyableTooltip: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    hasFocus: {
                        type: BooleanConstructor;
                        required: true;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    copyableText: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    size: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                        validator(value: string): boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    size: string;
                    required: boolean;
                    disabled: boolean;
                    isInherited: boolean;
                    copyableText: string;
                    isInheritanceField: boolean;
                    disableInheritanceToggle: boolean;
                    copyable: boolean;
                    copyableTooltip: boolean;
                    helpText: string;
                }, {}, {
                    "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        t: import('vue-i18n').ComposerTranslation<{
                            en: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                            de: {
                                tooltipRemoveInheritance: string;
                                tooltipRestoreInheritance: string;
                            };
                        }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                            [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                        }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                        onClickRemoveInheritance: () => void;
                        onClickRestoreInheritance: () => void;
                    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        isInherited: {
                            type: BooleanConstructor;
                            required: true;
                            default: boolean;
                        };
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        disabled: boolean;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        text: {
                            type: StringConstructor;
                            required: true;
                            default: string;
                        };
                        width: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        showDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                        hideDelay: {
                            type: NumberConstructor;
                            required: false;
                            default: number;
                        };
                    }>> & Readonly<{}>, {
                        text: string;
                        width: number;
                        showDelay: number;
                        hideDelay: number;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>, {
                        copyToClipboard: () => void;
                        tooltipText: import('vue').ComputedRef<string>;
                        wasCopied: Ref<boolean, boolean>;
                    }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                        createNotification(): void;
                        createNotificationSuccess(config: any): void;
                        createNotificationInfo(config: any): void;
                        createNotificationWarning(config: any): void;
                        createNotificationError(config: any): void;
                        createSystemNotificationSuccess(config: any): void;
                        createSystemNotificationInfo(config: any): void;
                        createSystemNotificationWarning(config: any): void;
                        createSystemNotificationError(config: any): void;
                        createSystemNotification(config: any): void;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                        tooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                    }>> & Readonly<{}>, {
                        tooltip: boolean;
                        copyableText: string;
                    }, {}, {
                        "mt-icon": import('vue').DefineComponent<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                            name: string;
                            color?: string;
                            decorative?: boolean;
                            size?: string;
                        }> & Readonly<{}>, {
                            decorative: boolean;
                            size: string;
                        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    }, {
                        tooltip: import('vue').ObjectDirective<any, any, string, string>;
                    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-field-error": import('vue').DefineComponent<{
                    error?: Record<string, any> | null;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    error?: Record<string, any> | null;
                }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            "mt-popover-item": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                emitChangeCheckbox: (changeValue: boolean) => void;
                emitChangeSwitch: (changeValue: boolean) => void;
                emitVisibilityChange: (changeValue: boolean) => void;
                emitClickOptions: () => void;
                componentClasses: import('vue').ComputedRef<{
                    "mt-popover-item--default": boolean;
                    "mt-popover-item--critical": boolean;
                    "mt-popover-item--active": boolean;
                    "mt-popover-item--disabled": boolean;
                    "mt-popover-item--border-top": boolean;
                    "mt-popover-item--border-bottom": boolean;
                    "mt-popover-item--clickable": boolean;
                }>;
                labelClasses: import('vue').ComputedRef<{
                    "mt-popover-item__label--clickable": boolean;
                }>;
                onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
                handleLableClick: () => void;
                isClickable: import('vue').ComputedRef<boolean>;
                iconClasses: import('vue').ComputedRef<{
                    "mt-popover-item__icon--clickable": boolean;
                }>;
                id: string;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                label: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: true;
                };
                type: {
                    type: PropType<MtPopoverItemType>;
                    required: false;
                    default: string;
                    validator: (value: string) => boolean;
                };
                showCheckbox: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxChecked: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                checkboxPartial: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                icon: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                onLabelClick: {
                    type: PropType<(() => void) | undefined>;
                    required: false;
                    default: undefined;
                };
                metaCopy: {
                    type: PropType<string | import('vue-i18n').TranslateResult>;
                    required: false;
                    default: string;
                };
                contextualDetail: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                shortcut: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                showSwitch: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                switchValue: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showVisibility: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                visible: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                showOptions: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                optionsCount: {
                    type: NumberConstructor;
                    required: false;
                    default: undefined;
                };
                borderTop: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                borderBottom: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
                role: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                isOptionItem: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{
                "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
                "onChange-switch"?: ((...args: any[]) => any) | undefined;
                "onChange-visibility"?: ((...args: any[]) => any) | undefined;
                "onClick-options"?: ((...args: any[]) => any) | undefined;
            }>, {
                type: MtPopoverItemType;
                disabled: boolean;
                icon: string;
                role: string;
                visible: boolean;
                showCheckbox: boolean;
                checkboxChecked: boolean;
                checkboxPartial: boolean;
                onLabelClick: (() => void) | undefined;
                metaCopy: string;
                contextualDetail: string;
                shortcut: string;
                showSwitch: boolean;
                switchValue: boolean;
                showVisibility: boolean;
                showOptions: boolean;
                optionsCount: number;
                borderTop: boolean;
                borderBottom: boolean;
                isOptionItem: boolean;
            }, {}, {
                "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>, {
                    checkboxClasses: import('vue').ComputedRef<{
                        "mt-switch--future-remove-default-margin": boolean;
                    }>;
                }, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    MtCheckboxFieldClasses(): {
                        "has--error": boolean;
                        "is--disabled": boolean;
                        "is--inherited": boolean;
                        "is--bordered": boolean;
                        "is--partly-checked": boolean;
                    };
                    identification(): string;
                    hasError(): boolean;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    isDisabled(): boolean;
                    isPartlyChecked(): boolean;
                    iconName(): string;
                }, {
                    onChange(changeEvent: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: undefined;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: undefined;
                    };
                    partial: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    required: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                }>> & Readonly<{}>, {
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    partial: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                }, {}, {
                    "mt-icon": import('vue').DefineComponent<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        name: string;
                        color?: string;
                        decorative?: boolean;
                        size?: string;
                    }> & Readonly<{}>, {
                        decorative: boolean;
                        size: string;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>, {}, {
                    id: string | undefined;
                    currentValue: boolean | undefined;
                }, {
                    identification(): string;
                    inputState(): boolean;
                    isInheritanceField(): boolean;
                    isInherited(): boolean;
                    hasError(): boolean;
                    MtSwitchFieldClasses(): Record<string, boolean>[];
                    errorClasses(): {
                        "mt-field__error--move-up": boolean;
                    }[];
                    isDisabled(): boolean;
                }, {
                    onChange(changeEvent: Event): void;
                    onInheritanceRestore(event: Event): void;
                }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>, {}, {}, {
                    formFieldName(): string | undefined;
                }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    mapInheritance: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    mapInheritance: Record<string, any>;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                    label: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    required: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    disabled: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    checked: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    bordered: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    inheritedValue: {
                        type: BooleanConstructor;
                        required: false;
                        default: null;
                    };
                    helpText: {
                        type: StringConstructor;
                        required: false;
                        default: null;
                    };
                    error: {
                        type: ObjectConstructor;
                        required: false;
                        default: null;
                    };
                    removeTopMargin: {
                        type: BooleanConstructor;
                        required: false;
                        default: boolean;
                    };
                    name: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>> & Readonly<{}>, {
                    name: string;
                    required: boolean;
                    label: string;
                    disabled: boolean;
                    error: Record<string, any>;
                    helpText: string;
                    checked: boolean;
                    inheritedValue: boolean;
                    bordered: boolean;
                    removeTopMargin: boolean;
                }, {}, {
                    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {
                        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
                        future: {
                            removeCardWidth: boolean;
                            removeDefaultMargin: boolean;
                        };
                    }, {
                        id: string | undefined;
                    }, {
                        identification(): string;
                        showLabel(): boolean;
                        mtFieldLabelClasses(): {
                            "is--required": boolean;
                        };
                        mtBlockSize(): string;
                        hasError(): boolean;
                    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        isValid(): boolean;
                    }, {
                        validate(value: unknown): boolean;
                        validateRule(value: unknown, rule: string): boolean;
                    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        validation: {
                            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        validation: string | boolean | Record<string, any> | unknown[];
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>, {}, {}, {
                        formFieldName(): string | undefined;
                    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        mapInheritance: {
                            type: ObjectConstructor;
                            required: false;
                            default: null;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        mapInheritance: Record<string, any>;
                    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                        disabled: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        required: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInherited: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        isInheritanceField: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        disableInheritanceToggle: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyable: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        copyableTooltip: {
                            type: BooleanConstructor;
                            required: false;
                            default: boolean;
                        };
                        hasFocus: {
                            type: BooleanConstructor;
                            required: true;
                        };
                        helpText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        copyableText: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                        };
                        size: {
                            type: StringConstructor;
                            required: false;
                            default: string;
                            validator(value: string): boolean;
                        };
                        name: {
                            type: StringConstructor;
                            required: false;
                            default: null;
                        };
                    }>> & Readonly<{}>, {
                        name: string;
                        size: string;
                        required: boolean;
                        disabled: boolean;
                        isInherited: boolean;
                        copyableText: string;
                        isInheritanceField: boolean;
                        disableInheritanceToggle: boolean;
                        copyable: boolean;
                        copyableTooltip: boolean;
                        helpText: string;
                    }, {}, {
                        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            t: import('vue-i18n').ComposerTranslation<{
                                en: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                                de: {
                                    tooltipRemoveInheritance: string;
                                    tooltipRestoreInheritance: string;
                                };
                            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                            onClickRemoveInheritance: () => void;
                            onClickRestoreInheritance: () => void;
                        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            isInherited: {
                                type: BooleanConstructor;
                                required: true;
                                default: boolean;
                            };
                            disabled: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            disabled: boolean;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            text: {
                                type: StringConstructor;
                                required: true;
                                default: string;
                            };
                            width: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            showDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                            hideDelay: {
                                type: NumberConstructor;
                                required: false;
                                default: number;
                            };
                        }>> & Readonly<{}>, {
                            text: string;
                            width: number;
                            showDelay: number;
                            hideDelay: number;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>, {
                            copyToClipboard: () => void;
                            tooltipText: import('vue').ComputedRef<string>;
                            wasCopied: Ref<boolean, boolean>;
                        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                            createNotification(): void;
                            createNotificationSuccess(config: any): void;
                            createNotificationInfo(config: any): void;
                            createNotificationWarning(config: any): void;
                            createNotificationError(config: any): void;
                            createSystemNotificationSuccess(config: any): void;
                            createSystemNotificationInfo(config: any): void;
                            createSystemNotificationWarning(config: any): void;
                            createSystemNotificationError(config: any): void;
                            createSystemNotification(config: any): void;
                        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                            copyableText: {
                                type: StringConstructor;
                                required: false;
                                default: null;
                            };
                            tooltip: {
                                type: BooleanConstructor;
                                required: false;
                                default: boolean;
                            };
                        }>> & Readonly<{}>, {
                            tooltip: boolean;
                            copyableText: string;
                        }, {}, {
                            "mt-icon": import('vue').DefineComponent<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                                name: string;
                                color?: string;
                                decorative?: boolean;
                                size?: string;
                            }> & Readonly<{}>, {
                                decorative: boolean;
                                size: string;
                            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                        }, {
                            tooltip: import('vue').ObjectDirective<any, any, string, string>;
                        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                    "mt-field-error": import('vue').DefineComponent<{
                        error?: Record<string, any> | null;
                    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                        error?: Record<string, any> | null;
                    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
                }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-button": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    variant?: "primary" | "secondary" | "critical" | "action";
                    ghost?: boolean;
                    size?: "x-small" | "small" | "default" | "large";
                    square?: boolean;
                    block?: boolean;
                    link?: string;
                    isLoading?: boolean;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "x-small" | "small" | "default" | "large";
                    variant: "primary" | "secondary" | "critical" | "action";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                variant?: "primary" | "secondary" | "critical" | "action";
                ghost?: boolean;
                size?: "x-small" | "small" | "default" | "large";
                square?: boolean;
                block?: boolean;
                link?: string;
                isLoading?: boolean;
            }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
                size: "x-small" | "small" | "default" | "large";
                variant: "primary" | "secondary" | "critical" | "action";
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                }> & {
                    default: null;
                    iconFront: {
                        size: number;
                    };
                    iconBack: {
                        size: number;
                    };
                };
            });
            "mt-smooth-reflow": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>, {}, {}, {}, {}, ComponentOptions<Vue>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                options: {
                    type: ObjectConstructor;
                    required: false;
                    default: () => {
                        property: string[];
                        transition: string;
                    };
                };
            }>> & Readonly<{}>, {
                options: Record<string, any>;
                tag: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-floating-ui": {
                new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                    close: () => any;
                }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
                    floatingUi: HTMLDivElement;
                    floatingUiTrigger: HTMLDivElement;
                    floatingUiContent: HTMLDivElement;
                    floatingUiArrow: HTMLDivElement;
                }, HTMLDivElement, import('vue').ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    isOpened: boolean;
                    floatingUiOptions?: Partial<{
                        placement?: import('@floating-ui/utils').Placement | undefined;
                        strategy?: import('@floating-ui/utils').Strategy | undefined;
                        middleware?: (false | {
                            name: string;
                            options?: any;
                            fn: (state: {
                                placement: import('@floating-ui/utils').Placement;
                                platform: import('@floating-ui/core').Platform;
                                strategy: import('@floating-ui/utils').Strategy;
                                x: number;
                                y: number;
                                middlewareData: import('@floating-ui/core').MiddlewareData;
                                initialPlacement: import('@floating-ui/utils').Placement;
                                rects: import('@floating-ui/utils').ElementRects;
                                elements: import('@floating-ui/dom').Elements;
                            }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                        } | null | undefined)[];
                        platform?: import('@floating-ui/dom').Platform | undefined;
                    }>;
                    showArrow?: boolean;
                    offset?: number;
                    autoUpdateOptions?: Partial<Partial<{
                        ancestorScroll: boolean;
                        ancestorResize: boolean;
                        elementResize: boolean;
                        layoutShift: boolean;
                        animationFrame: boolean;
                    }>>;
                }> & Readonly<{
                    onClose?: (() => any) | undefined;
                }>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import('vue').ComponentOptionsBase<Readonly<{
                isOpened: boolean;
                floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
                showArrow?: boolean;
                offset?: number;
                autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
            }> & Readonly<{
                onClose?: (() => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
                close: () => any;
            }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
                $slots: {
                    trigger?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-empty-state": import('vue').DefineComponent<{
        headline: string;
        description: string;
        icon: string;
        linkHref?: string;
        linkText?: string;
        buttonText?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "button-click": (...args: any[]) => void;
    }, string, import('vue').PublicProps, Readonly<{
        headline: string;
        description: string;
        icon: string;
        linkHref?: string;
        linkText?: string;
        buttonText?: string;
    }> & Readonly<{
        "onButton-click"?: ((...args: any[]) => any) | undefined;
    }>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
    "mt-data-table-text-renderer": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<TextColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>, {
        renderString: import('vue').ComputedRef<any>;
        renderPreviewImage: import('vue').ComputedRef<any>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<TextColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-data-table-number-renderer": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<NumberColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>, {
        renderString: import('vue').ComputedRef<string>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<NumberColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-data-table-badge-renderer": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<ColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>, {
        badgeProps: import('vue').ComputedRef<{
            label: string;
            variant: string;
        }>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<ColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {
        "mt-color-badge": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            variant: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: import('../../feedback-indicator/mt-color-badge/mt-color-badge').MtColorBadgeVariant): boolean;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            rounded: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasText: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {}, {}, {
            colorStyle(): string;
            variantClass(): Record<string, boolean>;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            variant: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: import('../../feedback-indicator/mt-color-badge/mt-color-badge').MtColorBadgeVariant): boolean;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            rounded: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasText: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            color: string;
            variant: string;
            rounded: boolean;
            hasText: boolean;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-data-table-price-renderer": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<PriceColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>, {
        renderString: import('vue').ComputedRef<string>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        columnDefinition: {
            type: PropType<PriceColumnDefinition>;
            required: true;
        };
        data: {
            type: PropType<unknown>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-data-table-reset-filter-button": import('vue').DefineComponent<{
        numberOfAppliedFilters: number;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        numberOfAppliedFilters: number;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLButtonElement>;
    "mt-data-table-filter": import('vue').DefineComponent<{
        filter: Filter;
        appliedOptions: import('./mt-data-table.interfaces').Option[];
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        removeOption: (filterId: string, optionId: string) => any;
        addOption: (filterId: string, optionId: string) => any;
        removeFilter: () => any;
    }, string, import('vue').PublicProps, Readonly<{
        filter: Filter;
        appliedOptions: import('./mt-data-table.interfaces').Option[];
    }> & Readonly<{
        onRemoveOption?: ((filterId: string, optionId: string) => any) | undefined;
        onAddOption?: ((filterId: string, optionId: string) => any) | undefined;
        onRemoveFilter?: (() => any) | undefined;
    }>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, HTMLDivElement>;
    "mt-inset": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLDivElement, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
}, {
    draggable: import('vue').Directive;
    droppable: import('vue').Directive;
    tooltip: import('vue').ObjectDirective<any, any, string, string>;
    stickyColumn: import('vue').Directive;
}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
