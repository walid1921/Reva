import { PropType } from 'vue';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * The value of the colorpicker field.
     */
    modelValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * A label for your text field. Usually used to guide the user what value this field controls.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * A text that helps the user to understand what this field does.
     */
    helpText: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * Change the output value which gets emitted and shown in the field.
     * @values auto, hex, hsl, rgb
     */
    colorOutput: {
        type: PropType<"auto" | "hex" | "hsl" | "rgb">;
        required: false;
        default: string;
    };
    /**
     * If activated then the color value can contain alpha values
     */
    alpha: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is disabled.
     */
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is required.
     */
    required: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Toggles the inheritance visualization.
     */
    isInherited: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is inheritable.
     */
    isInheritanceField: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines the active state of the inheritance toggle.
     */
    disableInheritanceToggle: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field can be edited
     */
    readonly: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Toggle the labels above each field inside the colorpicker
     */
    colorLabels: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    zIndex: {
        type: PropType<number | null>;
        required: false;
        default: null;
    };
    /**
     * An error in your business logic related to this field.
     *
     * @example {"code": 500, "detail": "Error while saving"}
     */
    error: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    /**
     * @ignore
     */
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * Show the colorpicker in a compact mode
     */
    compact: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Use apply-mode to apply the color value on button click
     */
    applyMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>, {
    t: import('vue-i18n').ComposerTranslation<{
        en: {
            "mt-colorpicker": {
                apply: string;
            };
        };
        de: {
            "mt-colorpicker": {
                apply: string;
            };
        };
    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
    }>, never, "mt-colorpicker" | "mt-colorpicker.apply", "mt-colorpicker" | "mt-colorpicker.apply">;
}, {
    localValue: string | {
        string: string;
        red: string;
        green: string;
        blue: string;
        alpha?: string;
    };
    visible: boolean;
    isDragging: boolean;
    userInput: null;
    luminanceValue: number;
    saturationValue: number;
    hueValue: number;
    alphaValue: number;
    hasFocus: boolean;
}, {
    colorValue: {
        get(): string | {
            string: string;
            red: string;
            green: string;
            blue: string;
            alpha?: string;
        };
        set(newColor: {
            string: string;
            red: string;
            green: string;
            blue: string;
            alpha?: string;
        }): void;
    };
    integerAlpha: {
        get(): number;
        set(newAlphaValue: number): void;
    };
    sliderBackground(): string;
    isColorValid(): boolean;
    previewColorValue(): string;
    selectorBackground(): string;
    redValue: {
        get(): number;
        set(newRedValue: number): void;
    };
    greenValue: {
        get(): number;
        set(newGreenValue: number): void;
    };
    blueValue: {
        get(): number;
        set(newBlueValue: number): void;
    };
    rgbValue(): string;
    hslValue(): string;
    hexValue: {
        get(): string | {
            string: string;
            red: string;
            green: string;
            blue: string;
            alpha?: string | undefined;
        };
        set(newValue: string): void;
    };
    convertedValue(): string | {
        string: string;
        red: string;
        green: string;
        blue: string;
        alpha?: string;
    };
    selectorPositionX(): string;
    selectorPositionY(): string;
    selectorStyles(): {
        backgroundColor: string;
        top: string;
        left: string;
    };
    componentClasses(): {
        "mt-colorpicker": boolean;
        "mt-colorpicker--compact": boolean;
    };
}, {
    debounceEmitColorValue: import('lodash').DebouncedFunc<() => void>;
    outsideClick(e: Event): void;
    setOutsideClickEvent(): void;
    removeOutsideClickEvent(): void;
    toggleColorPicker(): void;
    applyColor(): void;
    moveSelector(event: MouseEvent): void;
    setDragging(event: MouseEvent): void;
    removeDragging(): void;
    setSingleRGBValue(newColorValue: number, type: "red" | "green" | "blue"): void;
    setHslaValues(hue: number, saturation: number, luminance: number, alpha?: number): void;
    splitRGBValues(rgbString: string): {
        red: number;
        green: number;
        blue: number;
        alpha?: number;
    };
    splitHSLValues(hslString: string): {
        hue: number;
        saturation: number;
        luminance: number;
        alpha?: number;
    };
    convertHSLtoRGB(previousHue: number, previousSaturation: number, previousLuminance: number, previousAlpha: number): string | {
        string: string;
        red: string;
        green: string;
        blue: string;
        alpha?: string;
    };
    convertHSLtoHEX(previousHue: number, previousSaturation: number, previousLuminance: number, previousAlpha?: number): string | {
        string: string;
        red: string;
        green: string;
        blue: string;
        alpha?: string | undefined;
    };
    convertHSL(mode: "hex" | "rgb", color: {
        hue: number;
        saturation: number;
        luminance: number;
        alpha?: number | string;
    }): {
        string: string;
        red: string;
        green: string;
        blue: string;
        alpha?: string;
    } | string;
    convertRGBtoHSL(previousRed: number, previousGreen: number, previousBlue: number): {
        string: string;
        hue: number;
        saturation: number;
        luminance: number;
    };
    convertHEXtoHSL(previousHex: string): false | {
        string: string;
        hue: number;
        saturation: number;
        luminance: number;
        alpha?: number;
    };
    onClickInput(): void;
    setFocusClass(): void;
    removeFocusClass(): void;
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * The value of the colorpicker field.
     */
    modelValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    /**
     * A label for your text field. Usually used to guide the user what value this field controls.
     */
    label: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * A text that helps the user to understand what this field does.
     */
    helpText: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * Change the output value which gets emitted and shown in the field.
     * @values auto, hex, hsl, rgb
     */
    colorOutput: {
        type: PropType<"auto" | "hex" | "hsl" | "rgb">;
        required: false;
        default: string;
    };
    /**
     * If activated then the color value can contain alpha values
     */
    alpha: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is disabled.
     */
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is required.
     */
    required: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Toggles the inheritance visualization.
     */
    isInherited: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field is inheritable.
     */
    isInheritanceField: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines the active state of the inheritance toggle.
     */
    disableInheritanceToggle: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the field can be edited
     */
    readonly: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Toggle the labels above each field inside the colorpicker
     */
    colorLabels: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    zIndex: {
        type: PropType<number | null>;
        required: false;
        default: null;
    };
    /**
     * An error in your business logic related to this field.
     *
     * @example {"code": 500, "detail": "Error while saving"}
     */
    error: {
        type: ObjectConstructor;
        required: false;
        default: null;
    };
    /**
     * @ignore
     */
    name: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    /**
     * Show the colorpicker in a compact mode
     */
    compact: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    /**
     * Use apply-mode to apply the color value on button click
     */
    applyMode: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & Readonly<{}>, {
    name: string;
    required: boolean;
    label: string;
    modelValue: string;
    disabled: boolean;
    readonly: boolean;
    error: Record<string, any>;
    zIndex: number | null;
    isInherited: boolean;
    isInheritanceField: boolean;
    disableInheritanceToggle: boolean;
    helpText: string;
    colorOutput: "auto" | "hex" | "hsl" | "rgb";
    alpha: boolean;
    colorLabels: boolean;
    compact: boolean;
    applyMode: boolean;
}, {}, {
    "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasFocus: {
            type: BooleanConstructor;
            required: true;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        copyableText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {
        hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
        future: {
            removeCardWidth: boolean;
            removeDefaultMargin: boolean;
        };
    }, {
        id: string | undefined;
    }, {
        identification(): string;
        showLabel(): boolean;
        mtFieldLabelClasses(): {
            "is--required": boolean;
        };
        mtBlockSize(): string;
        hasError(): boolean;
    }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        validation: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
            required: false;
            default: null;
        };
    }>, {}, {}, {
        isValid(): boolean;
    }, {
        validate(value: unknown): boolean;
        validateRule(value: unknown, rule: string): boolean;
    }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        validation: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        validation: string | boolean | Record<string, any> | unknown[];
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {}, {
        formFieldName(): string | undefined;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        mapInheritance: Record<string, any>;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInherited: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isInheritanceField: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        disableInheritanceToggle: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        copyableTooltip: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        hasFocus: {
            type: BooleanConstructor;
            required: true;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        copyableText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
            default: string;
            validator(value: string): boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        size: string;
        required: boolean;
        disabled: boolean;
        isInherited: boolean;
        copyableText: string;
        isInheritanceField: boolean;
        disableInheritanceToggle: boolean;
        copyable: boolean;
        copyableTooltip: boolean;
        helpText: string;
    }, {}, {
        "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            isInherited: {
                type: BooleanConstructor;
                required: true;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            t: import('vue-i18n').ComposerTranslation<{
                en: {
                    tooltipRemoveInheritance: string;
                    tooltipRestoreInheritance: string;
                };
                de: {
                    tooltipRemoveInheritance: string;
                    tooltipRestoreInheritance: string;
                };
            }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
            }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
            onClickRemoveInheritance: () => void;
            onClickRestoreInheritance: () => void;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            isInherited: {
                type: BooleanConstructor;
                required: true;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            disabled: boolean;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
                default: string;
            };
            width: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            showDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            hideDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
                default: string;
            };
            width: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            showDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            hideDelay: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
        }>> & Readonly<{}>, {
            text: string;
            width: number;
            showDelay: number;
            hideDelay: number;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            copyableText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            tooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>, {
            copyToClipboard: () => void;
            tooltipText: import('vue').ComputedRef<string>;
            wasCopied: import('vue').Ref<boolean, boolean>;
        }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
            createNotification(): void;
            createNotificationSuccess(config: any): void;
            createNotificationInfo(config: any): void;
            createNotificationWarning(config: any): void;
            createNotificationError(config: any): void;
            createSystemNotificationSuccess(config: any): void;
            createSystemNotificationInfo(config: any): void;
            createSystemNotificationWarning(config: any): void;
            createSystemNotificationError(config: any): void;
            createSystemNotification(config: any): void;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            copyableText: {
                type: StringConstructor;
                required: false;
                default: null;
            };
            tooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            tooltip: boolean;
            copyableText: string;
        }, {}, {
            "mt-icon": import('vue').DefineComponent<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                name: string;
                color?: string;
                decorative?: boolean;
                size?: string;
            }> & Readonly<{}>, {
                decorative: boolean;
                size: string;
            }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        }, {
            tooltip: import('vue').ObjectDirective<any, any, string, string>;
        }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-text": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('vue').ExtractPropTypes<{
            size: {
                type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
                required: false;
                default: string;
            };
            weight: {
                type: PropType<"bold" | "semibold" | "medium" | "regular">;
                required: false;
                default: string;
            };
            color: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            as: {
                type: PropType<string | import('vue').Component>;
                required: false;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, {
            color: string;
            size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
            weight: "bold" | "semibold" | "medium" | "regular";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<{
        size: {
            type: PropType<"2xs" | "xs" | "s" | "m" | "l" | "xl" | "2xl" | "3xl">;
            required: false;
            default: string;
        };
        weight: {
            type: PropType<"bold" | "semibold" | "medium" | "regular">;
            required: false;
            default: string;
        };
        color: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        as: {
            type: PropType<string | import('vue').Component>;
            required: false;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        color: string;
        size: "s" | "2xs" | "xs" | "m" | "l" | "xl" | "2xl" | "3xl";
        weight: "bold" | "semibold" | "medium" | "regular";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
    "mt-floating-ui": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<{
                placement?: import('@floating-ui/utils').Placement | undefined;
                strategy?: import('@floating-ui/utils').Strategy | undefined;
                middleware?: (false | {
                    name: string;
                    options?: any;
                    fn: (state: {
                        placement: import('@floating-ui/utils').Placement;
                        platform: import('@floating-ui/core').Platform;
                        strategy: import('@floating-ui/utils').Strategy;
                        x: number;
                        y: number;
                        middlewareData: import('@floating-ui/core').MiddlewareData;
                        initialPlacement: import('@floating-ui/utils').Placement;
                        rects: import('@floating-ui/utils').ElementRects;
                        elements: import('@floating-ui/dom').Elements;
                    }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                } | null | undefined)[];
                platform?: import('@floating-ui/dom').Platform | undefined;
            }>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<Partial<{
                ancestorScroll: boolean;
                ancestorResize: boolean;
                elementResize: boolean;
                layoutShift: boolean;
                animationFrame: boolean;
            }>>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            close: () => any;
        }, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {
            floatingUi: HTMLDivElement;
            floatingUiTrigger: HTMLDivElement;
            floatingUiContent: HTMLDivElement;
            floatingUiArrow: HTMLDivElement;
        }, HTMLDivElement, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            isOpened: boolean;
            floatingUiOptions?: Partial<{
                placement?: import('@floating-ui/utils').Placement | undefined;
                strategy?: import('@floating-ui/utils').Strategy | undefined;
                middleware?: (false | {
                    name: string;
                    options?: any;
                    fn: (state: {
                        placement: import('@floating-ui/utils').Placement;
                        platform: import('@floating-ui/core').Platform;
                        strategy: import('@floating-ui/utils').Strategy;
                        x: number;
                        y: number;
                        middlewareData: import('@floating-ui/core').MiddlewareData;
                        initialPlacement: import('@floating-ui/utils').Placement;
                        rects: import('@floating-ui/utils').ElementRects;
                        elements: import('@floating-ui/dom').Elements;
                    }) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
                } | null | undefined)[];
                platform?: import('@floating-ui/dom').Platform | undefined;
            }>;
            showArrow?: boolean;
            offset?: number;
            autoUpdateOptions?: Partial<Partial<{
                ancestorScroll: boolean;
                ancestorResize: boolean;
                elementResize: boolean;
                layoutShift: boolean;
                animationFrame: boolean;
            }>>;
        }> & Readonly<{
            onClose?: (() => any) | undefined;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        isOpened: boolean;
        floatingUiOptions?: Partial<import('@floating-ui/dom').ComputePositionConfig>;
        showArrow?: boolean;
        offset?: number;
        autoUpdateOptions?: Partial<import('@floating-ui/dom').AutoUpdateOptions>;
    }> & Readonly<{
        onClose?: (() => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        close: () => any;
    }, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            trigger?(_: {}): any;
            default?(_: {}): any;
        };
    });
    "mt-button": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            disabled?: boolean;
            variant?: "primary" | "secondary" | "critical" | "action";
            ghost?: boolean;
            size?: "x-small" | "small" | "default" | "large";
            square?: boolean;
            block?: boolean;
            link?: string;
            isLoading?: boolean;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            size: "x-small" | "small" | "default" | "large";
            variant: "primary" | "secondary" | "critical" | "action";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        disabled?: boolean;
        variant?: "primary" | "secondary" | "critical" | "action";
        ghost?: boolean;
        size?: "x-small" | "small" | "default" | "large";
        square?: boolean;
        block?: boolean;
        link?: string;
        isLoading?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        size: "x-small" | "small" | "default" | "large";
        variant: "primary" | "secondary" | "critical" | "action";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        }> & {
            default: null;
            iconFront: {
                size: number;
            };
            iconBack: {
                size: number;
            };
        };
    });
    "mt-field-error": import('vue').DefineComponent<{
        error?: Record<string, any> | null;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        error?: Record<string, any> | null;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
