import { PropType } from 'vue';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    /**
     * A label for your date picker field. It helps the user understand what this field is for.
     */
    label: {
        type: PropType<string | null>;
        required: false;
        default: null;
    };
    /**
     * Defines the type of the date picker.
     * Options: "date" (for selecting a date), or "datetime" (for selecting both).
     */
    dateType: {
        type: PropType<"date" | "datetime">;
        required: false;
        default: string;
    };
    /**
     * Sets the locale for the date picker.
     * This affects things like the language used for month names and weekdays.
     */
    locale: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * Defines the time zone for the date picker.
     * Useful for adjusting date and time according to a specific timezone.
     */
    timeZone: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * The value of the date picker. Can be a single string or an array of strings.
     * This represents the currently selected date(s).
     */
    modelValue: {
        type: PropType<string | string[]>;
        default: null;
    };
    /**
     * Placeholder text to show in the date picker input field when no date is selected.
     */
    placeholder: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * Determines if the timepicker is in 24 or 12 hour format
     */
    is24: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the date picker field is required.
     * If true, the user must select a value before submitting the form.
     */
    required: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the date picker field is disabled.
     * If true, the user will not be able to interact with the field.
     */
    disabled: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Enables the date range selection feature.
     * If true, the user can select a start and end date.
     */
    range: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
}>, {}, {
    isDatepickerOpen: boolean;
    isTimeHintVisible: boolean;
}, {
    computedValue: {
        get(): string | string[];
        set(newValue: Date | [Date, Date] | null): void;
    };
}, {
    formatDate(date: Date | [Date, Date]): string;
    convertDateToIso(date: Date | [Date, Date]): string | string[];
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    /**
     * A label for your date picker field. It helps the user understand what this field is for.
     */
    label: {
        type: PropType<string | null>;
        required: false;
        default: null;
    };
    /**
     * Defines the type of the date picker.
     * Options: "date" (for selecting a date), or "datetime" (for selecting both).
     */
    dateType: {
        type: PropType<"date" | "datetime">;
        required: false;
        default: string;
    };
    /**
     * Sets the locale for the date picker.
     * This affects things like the language used for month names and weekdays.
     */
    locale: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * Defines the time zone for the date picker.
     * Useful for adjusting date and time according to a specific timezone.
     */
    timeZone: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * The value of the date picker. Can be a single string or an array of strings.
     * This represents the currently selected date(s).
     */
    modelValue: {
        type: PropType<string | string[]>;
        default: null;
    };
    /**
     * Placeholder text to show in the date picker input field when no date is selected.
     */
    placeholder: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    /**
     * Determines if the timepicker is in 24 or 12 hour format
     */
    is24: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the date picker field is required.
     * If true, the user must select a value before submitting the form.
     */
    required: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Determines if the date picker field is disabled.
     * If true, the user will not be able to interact with the field.
     */
    disabled: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
    /**
     * Enables the date range selection feature.
     * If true, the user can select a start and end date.
     */
    range: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
}>> & Readonly<{}>, {
    required: boolean;
    label: string | null;
    locale: string;
    is24: boolean;
    range: boolean;
    modelValue: string | string[];
    placeholder: string;
    disabled: boolean;
    dateType: "date" | "datetime";
    timeZone: string;
}, {}, {
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    "vue-datepicker": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<string[]> | import('vue').ExtractPropTypes<import('vue').ComponentObjectPropsOptions<import('@vuepic/vue-datepicker').VueDatePickerProps>>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
            "onUpdate:model-timezone-value"?: ((...args: any[]) => any) | undefined;
            "onText-submit"?: ((...args: any[]) => any) | undefined;
            onClosed?: ((...args: any[]) => any) | undefined;
            onCleared?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            "onInternal-model-change"?: ((...args: any[]) => any) | undefined;
            "onRecalculate-position"?: ((...args: any[]) => any) | undefined;
            "onFlow-step"?: ((...args: any[]) => any) | undefined;
            "onUpdate-month-year"?: ((...args: any[]) => any) | undefined;
            "onInvalid-select"?: ((...args: any[]) => any) | undefined;
            "onTooltip-open"?: ((...args: any[]) => any) | undefined;
            "onTooltip-close"?: ((...args: any[]) => any) | undefined;
            "onInvalid-fixed-range"?: ((...args: any[]) => any) | undefined;
            "onTime-picker-open"?: ((...args: any[]) => any) | undefined;
            "onTime-picker-close"?: ((...args: any[]) => any) | undefined;
            "onAm-pm-change"?: ((...args: any[]) => any) | undefined;
            "onRange-start"?: ((...args: any[]) => any) | undefined;
            "onRange-end"?: ((...args: any[]) => any) | undefined;
            "onDate-update"?: ((...args: any[]) => any) | undefined;
            "onInvalid-date"?: ((...args: any[]) => any) | undefined;
            "onOverlay-toggle"?: ((...args: any[]) => any) | undefined;
            "onText-input"?: ((...args: any[]) => any) | undefined;
        }, {}, {}, import('vue').ComputedOptions, import('@vuepic/vue-datepicker').PublicMethods, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, import('@vuepic/vue-datepicker').EmitEvents[], import('@vuepic/vue-datepicker').VueDatePickerProps, {
            [x: number]: string;
        } | {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, {} & (Readonly<import('vue').ExtractPropTypes<string[]> | import('vue').ExtractPropTypes<import('vue').ComponentObjectPropsOptions<import('@vuepic/vue-datepicker').VueDatePickerProps>>> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
            "onUpdate:model-timezone-value"?: ((...args: any[]) => any) | undefined;
            "onText-submit"?: ((...args: any[]) => any) | undefined;
            onClosed?: ((...args: any[]) => any) | undefined;
            onCleared?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            "onInternal-model-change"?: ((...args: any[]) => any) | undefined;
            "onRecalculate-position"?: ((...args: any[]) => any) | undefined;
            "onFlow-step"?: ((...args: any[]) => any) | undefined;
            "onUpdate-month-year"?: ((...args: any[]) => any) | undefined;
            "onInvalid-select"?: ((...args: any[]) => any) | undefined;
            "onTooltip-open"?: ((...args: any[]) => any) | undefined;
            "onTooltip-close"?: ((...args: any[]) => any) | undefined;
            "onInvalid-fixed-range"?: ((...args: any[]) => any) | undefined;
            "onTime-picker-open"?: ((...args: any[]) => any) | undefined;
            "onTime-picker-close"?: ((...args: any[]) => any) | undefined;
            "onAm-pm-change"?: ((...args: any[]) => any) | undefined;
            "onRange-start"?: ((...args: any[]) => any) | undefined;
            "onRange-end"?: ((...args: any[]) => any) | undefined;
            "onDate-update"?: ((...args: any[]) => any) | undefined;
            "onInvalid-date"?: ((...args: any[]) => any) | undefined;
            "onOverlay-toggle"?: ((...args: any[]) => any) | undefined;
            "onText-input"?: ((...args: any[]) => any) | undefined;
        }), {}, {}, import('vue').ComputedOptions, import('@vuepic/vue-datepicker').PublicMethods, {
            [x: number]: string;
        } | {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('vue').ExtractPropTypes<string[]> | import('vue').ExtractPropTypes<import('vue').ComponentObjectPropsOptions<import('@vuepic/vue-datepicker').VueDatePickerProps>>> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
        "onUpdate:model-timezone-value"?: ((...args: any[]) => any) | undefined;
        "onText-submit"?: ((...args: any[]) => any) | undefined;
        onClosed?: ((...args: any[]) => any) | undefined;
        onCleared?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        "onInternal-model-change"?: ((...args: any[]) => any) | undefined;
        "onRecalculate-position"?: ((...args: any[]) => any) | undefined;
        "onFlow-step"?: ((...args: any[]) => any) | undefined;
        "onUpdate-month-year"?: ((...args: any[]) => any) | undefined;
        "onInvalid-select"?: ((...args: any[]) => any) | undefined;
        "onTooltip-open"?: ((...args: any[]) => any) | undefined;
        "onTooltip-close"?: ((...args: any[]) => any) | undefined;
        "onInvalid-fixed-range"?: ((...args: any[]) => any) | undefined;
        "onTime-picker-open"?: ((...args: any[]) => any) | undefined;
        "onTime-picker-close"?: ((...args: any[]) => any) | undefined;
        "onAm-pm-change"?: ((...args: any[]) => any) | undefined;
        "onRange-start"?: ((...args: any[]) => any) | undefined;
        "onRange-end"?: ((...args: any[]) => any) | undefined;
        "onDate-update"?: ((...args: any[]) => any) | undefined;
        "onInvalid-date"?: ((...args: any[]) => any) | undefined;
        "onOverlay-toggle"?: ((...args: any[]) => any) | undefined;
        "onText-input"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, import('vue').ComputedOptions, import('@vuepic/vue-datepicker').PublicMethods, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, import('@vuepic/vue-datepicker').EmitEvents[], import('@vuepic/vue-datepicker').EmitEvents, {
        [x: number]: string;
    } | {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('@vuepic/vue-datepicker').VueDatePickerProps & (new () => {
        $slots: Readonly<import('@vuepic/vue-datepicker').Slots> & import('@vuepic/vue-datepicker').Slots;
    });
    "mt-field-label": {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
            id: string;
            hasError?: boolean;
            required?: boolean;
            inheritance?: "linked" | "unlinked" | "none";
        }> & Readonly<{
            "onUpdate:inheritance"?: ((value: "linked" | "unlinked") => any) | undefined;
        }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
            "update:inheritance": (value: "linked" | "unlinked") => any;
        }, import('vue').PublicProps, {
            inheritance: "linked" | "unlinked" | "none";
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, HTMLLabelElement, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            id: string;
            hasError?: boolean;
            required?: boolean;
            inheritance?: "linked" | "unlinked" | "none";
        }> & Readonly<{
            "onUpdate:inheritance"?: ((value: "linked" | "unlinked") => any) | undefined;
        }>, {}, {}, {}, {}, {
            inheritance: "linked" | "unlinked" | "none";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<{
        id: string;
        hasError?: boolean;
        required?: boolean;
        inheritance?: "linked" | "unlinked" | "none";
    }> & Readonly<{
        "onUpdate:inheritance"?: ((value: "linked" | "unlinked") => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        "update:inheritance": (value: "linked" | "unlinked") => any;
    }, string, {
        inheritance: "linked" | "unlinked" | "none";
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
