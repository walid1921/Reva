import { PropType } from 'vue';
import { TranslateResult } from 'vue-i18n';
export type MtPopoverItemType = "default" | "critical" | "active";
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    label: {
        type: PropType<string | TranslateResult>;
        required: true;
    };
    type: {
        type: PropType<MtPopoverItemType>;
        required: false;
        default: string;
        validator: (value: string) => boolean;
    };
    showCheckbox: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    checkboxChecked: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    checkboxPartial: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    onLabelClick: {
        type: PropType<(() => void) | undefined>;
        required: false;
        default: undefined;
    };
    metaCopy: {
        type: PropType<string | TranslateResult>;
        required: false;
        default: string;
    };
    contextualDetail: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    shortcut: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    showSwitch: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    switchValue: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showVisibility: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showOptions: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    optionsCount: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
    borderTop: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderBottom: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    isOptionItem: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>, {
    emitChangeCheckbox: (changeValue: boolean) => void;
    emitChangeSwitch: (changeValue: boolean) => void;
    emitVisibilityChange: (changeValue: boolean) => void;
    emitClickOptions: () => void;
    componentClasses: import('vue').ComputedRef<{
        "mt-popover-item--default": boolean;
        "mt-popover-item--critical": boolean;
        "mt-popover-item--active": boolean;
        "mt-popover-item--disabled": boolean;
        "mt-popover-item--border-top": boolean;
        "mt-popover-item--border-bottom": boolean;
        "mt-popover-item--clickable": boolean;
    }>;
    labelClasses: import('vue').ComputedRef<{
        "mt-popover-item__label--clickable": boolean;
    }>;
    onLabelClickTabIndex: import('vue').ComputedRef<0 | -1>;
    handleLableClick: () => void;
    isClickable: import('vue').ComputedRef<boolean>;
    iconClasses: import('vue').ComputedRef<{
        "mt-popover-item__icon--clickable": boolean;
    }>;
    id: string;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("change-checkbox" | "change-switch" | "change-visibility" | "click-options")[], "change-checkbox" | "change-switch" | "change-visibility" | "click-options", import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    label: {
        type: PropType<string | TranslateResult>;
        required: true;
    };
    type: {
        type: PropType<MtPopoverItemType>;
        required: false;
        default: string;
        validator: (value: string) => boolean;
    };
    showCheckbox: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    checkboxChecked: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    checkboxPartial: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    onLabelClick: {
        type: PropType<(() => void) | undefined>;
        required: false;
        default: undefined;
    };
    metaCopy: {
        type: PropType<string | TranslateResult>;
        required: false;
        default: string;
    };
    contextualDetail: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    shortcut: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    showSwitch: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    switchValue: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showVisibility: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    showOptions: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    optionsCount: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
    borderTop: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderBottom: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    isOptionItem: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & Readonly<{
    "onChange-checkbox"?: ((...args: any[]) => any) | undefined;
    "onChange-switch"?: ((...args: any[]) => any) | undefined;
    "onChange-visibility"?: ((...args: any[]) => any) | undefined;
    "onClick-options"?: ((...args: any[]) => any) | undefined;
}>, {
    type: MtPopoverItemType;
    disabled: boolean;
    icon: string;
    role: string;
    visible: boolean;
    showCheckbox: boolean;
    checkboxChecked: boolean;
    checkboxPartial: boolean;
    onLabelClick: (() => void) | undefined;
    metaCopy: string;
    contextualDetail: string;
    shortcut: string;
    showSwitch: boolean;
    switchValue: boolean;
    showVisibility: boolean;
    showOptions: boolean;
    optionsCount: number;
    borderTop: boolean;
    borderBottom: boolean;
    isOptionItem: boolean;
}, {}, {
    "mt-checkbox": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        partial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>, {
        checkboxClasses: import('vue').ComputedRef<{
            "mt-switch--future-remove-default-margin": boolean;
        }>;
    }, {
        id: string | undefined;
        currentValue: boolean | undefined;
    }, {
        MtCheckboxFieldClasses(): {
            "has--error": boolean;
            "is--disabled": boolean;
            "is--inherited": boolean;
            "is--bordered": boolean;
            "is--partly-checked": boolean;
        };
        identification(): string;
        hasError(): boolean;
        inputState(): boolean;
        isInheritanceField(): boolean;
        isInherited(): boolean;
        isDisabled(): boolean;
        isPartlyChecked(): boolean;
        iconName(): string;
    }, {
        onChange(changeEvent: Event): void;
    }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {}, {
        formFieldName(): string | undefined;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        mapInheritance: Record<string, any>;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: undefined;
        };
        partial: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        required: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & Readonly<{}>, {
        required: boolean;
        label: string;
        disabled: boolean;
        error: Record<string, any>;
        helpText: string;
        checked: boolean;
        partial: boolean;
        inheritedValue: boolean;
        bordered: boolean;
    }, {}, {
        "mt-icon": import('vue').DefineComponent<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            name: string;
            color?: string;
            decorative?: boolean;
            size?: string;
        }> & Readonly<{}>, {
            decorative: boolean;
            size: string;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
        "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {
            hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
            future: {
                removeCardWidth: boolean;
                removeDefaultMargin: boolean;
            };
        }, {
            id: string | undefined;
        }, {
            identification(): string;
            showLabel(): boolean;
            mtFieldLabelClasses(): {
                "is--required": boolean;
            };
            mtBlockSize(): string;
            hasError(): boolean;
        }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>, {}, {}, {
            isValid(): boolean;
        }, {
            validate(value: unknown): boolean;
            validateRule(value: unknown, rule: string): boolean;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            validation: string | boolean | Record<string, any> | unknown[];
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            size: string;
            required: boolean;
            disabled: boolean;
            isInherited: boolean;
            copyableText: string;
            isInheritanceField: boolean;
            disableInheritanceToggle: boolean;
            copyable: boolean;
            copyableTooltip: boolean;
            helpText: string;
        }, {}, {
            "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                t: import('vue-i18n').ComposerTranslation<{
                    en: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                    de: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                    [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                onClickRemoveInheritance: () => void;
                onClickRestoreInheritance: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                disabled: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>> & Readonly<{}>, {
                text: string;
                width: number;
                showDelay: number;
                hideDelay: number;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                copyToClipboard: () => void;
                tooltipText: import('vue').ComputedRef<string>;
                wasCopied: import('vue').Ref<boolean, boolean>;
            }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                createNotification(): void;
                createNotificationSuccess(config: any): void;
                createNotificationInfo(config: any): void;
                createNotificationWarning(config: any): void;
                createNotificationError(config: any): void;
                createSystemNotificationSuccess(config: any): void;
                createSystemNotificationInfo(config: any): void;
                createSystemNotificationWarning(config: any): void;
                createSystemNotificationError(config: any): void;
                createSystemNotification(config: any): void;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                tooltip: boolean;
                copyableText: string;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-field-error": import('vue').DefineComponent<{
            error?: Record<string, any> | null;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            error?: Record<string, any> | null;
        }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        removeTopMargin: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>, {}, {
        id: string | undefined;
        currentValue: boolean | undefined;
    }, {
        identification(): string;
        inputState(): boolean;
        isInheritanceField(): boolean;
        isInherited(): boolean;
        hasError(): boolean;
        MtSwitchFieldClasses(): Record<string, boolean>[];
        errorClasses(): {
            "mt-field__error--move-up": boolean;
        }[];
        isDisabled(): boolean;
    }, {
        onChange(changeEvent: Event): void;
        onInheritanceRestore(event: Event): void;
    }, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>, {}, {}, {
        formFieldName(): string | undefined;
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        mapInheritance: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: null;
        };
    }>> & Readonly<{}>, {
        name: string;
        mapInheritance: Record<string, any>;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        bordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        inheritedValue: {
            type: BooleanConstructor;
            required: false;
            default: null;
        };
        helpText: {
            type: StringConstructor;
            required: false;
            default: null;
        };
        error: {
            type: ObjectConstructor;
            required: false;
            default: null;
        };
        removeTopMargin: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & Readonly<{}>, {
        name: string;
        required: boolean;
        label: string;
        disabled: boolean;
        error: Record<string, any>;
        helpText: string;
        checked: boolean;
        inheritedValue: boolean;
        bordered: boolean;
        removeTopMargin: boolean;
    }, {}, {
        "mt-base-field": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {
            hasSlotContent: (slot: import('vue').Slot | undefined | null, props?: any) => boolean;
            future: {
                removeCardWidth: boolean;
                removeDefaultMargin: boolean;
            };
        }, {
            id: string | undefined;
        }, {
            identification(): string;
            showLabel(): boolean;
            mtFieldLabelClasses(): {
                "is--required": boolean;
            };
            mtBlockSize(): string;
            hasError(): boolean;
        }, {}, import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>, {}, {}, {
            isValid(): boolean;
        }, {
            validate(value: unknown): boolean;
            validateRule(value: unknown, rule: string): boolean;
        }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            validation: {
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | ArrayConstructor)[];
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            validation: string | boolean | Record<string, any> | unknown[];
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any> | import('vue').DefineComponent<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>, {}, {}, {
            formFieldName(): string | undefined;
        }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            mapInheritance: {
                type: ObjectConstructor;
                required: false;
                default: null;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            mapInheritance: Record<string, any>;
        }, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
            disabled: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            required: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInherited: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            isInheritanceField: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            disableInheritanceToggle: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyable: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            copyableTooltip: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
            hasFocus: {
                type: BooleanConstructor;
                required: true;
            };
            helpText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            copyableText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            size: {
                type: StringConstructor;
                required: false;
                default: string;
                validator(value: string): boolean;
            };
            name: {
                type: StringConstructor;
                required: false;
                default: null;
            };
        }>> & Readonly<{}>, {
            name: string;
            size: string;
            required: boolean;
            disabled: boolean;
            isInherited: boolean;
            copyableText: string;
            isInheritanceField: boolean;
            disableInheritanceToggle: boolean;
            copyable: boolean;
            copyableTooltip: boolean;
            helpText: string;
        }, {}, {
            "mt-inheritance-switch": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                t: import('vue-i18n').ComposerTranslation<{
                    en: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                    de: {
                        tooltipRemoveInheritance: string;
                        tooltipRestoreInheritance: string;
                    };
                }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
                    [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
                }>, never, "tooltipRemoveInheritance" | "tooltipRestoreInheritance", "tooltipRemoveInheritance" | "tooltipRestoreInheritance">;
                onClickRemoveInheritance: () => void;
                onClickRestoreInheritance: () => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                isInherited: {
                    type: BooleanConstructor;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                disabled: boolean;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-help-text": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: true;
                    default: string;
                };
                width: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                showDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
                hideDelay: {
                    type: NumberConstructor;
                    required: false;
                    default: number;
                };
            }>> & Readonly<{}>, {
                text: string;
                width: number;
                showDelay: number;
                hideDelay: number;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
            "mt-field-copyable": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>, {
                copyToClipboard: () => void;
                tooltipText: import('vue').ComputedRef<string>;
                wasCopied: import('vue').Ref<boolean, boolean>;
            }, {}, {}, {}, import('vue').DefineComponent<{}, {}, {}, {}, {
                createNotification(): void;
                createNotificationSuccess(config: any): void;
                createNotificationInfo(config: any): void;
                createNotificationWarning(config: any): void;
                createNotificationError(config: any): void;
                createSystemNotificationSuccess(config: any): void;
                createSystemNotificationInfo(config: any): void;
                createSystemNotificationWarning(config: any): void;
                createSystemNotificationError(config: any): void;
                createSystemNotification(config: any): void;
            }, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
                copyableText: {
                    type: StringConstructor;
                    required: false;
                    default: null;
                };
                tooltip: {
                    type: BooleanConstructor;
                    required: false;
                    default: boolean;
                };
            }>> & Readonly<{}>, {
                tooltip: boolean;
                copyableText: string;
            }, {}, {
                "mt-icon": import('vue').DefineComponent<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
                    name: string;
                    color?: string;
                    decorative?: boolean;
                    size?: string;
                }> & Readonly<{}>, {
                    decorative: boolean;
                    size: string;
                }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
            }, {
                tooltip: import('vue').ObjectDirective<any, any, string, string>;
            }, string, import('vue').ComponentProvideOptions, true, {}, any>;
        }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
        "mt-field-error": import('vue').DefineComponent<{
            error?: Record<string, any> | null;
        }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
            error?: Record<string, any> | null;
        }> & Readonly<{}>, {}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
    }, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
