import { PropType } from 'vue';
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    options: {
        type: ArrayConstructor;
        required: false;
        default(): never[];
    };
    emptyMessage: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    focusEl: {
        type: PropType<HTMLDocument | HTMLElement>;
        required: false;
        default(): Document;
    };
    isLoading: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    popoverClasses: {
        type: PropType<string[]>;
        required: false;
        default(): never[];
    };
    popoverResizeWidth: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>, {
    t: import('vue-i18n').ComposerTranslation<{
        en: {
            messageNoResults: string;
        };
        de: {
            messageNoResults: string;
        };
    }, "en" | "de", import('@intlify/core-base').RemoveIndexSignature<{
        [x: string]: import('vue-i18n').LocaleMessageValue<import('vue-i18n').VueMessageType>;
    }>, never, "messageNoResults", "messageNoResults">;
    activeItemIndex: import('vue').Ref<number, number>;
    emitActiveItemIndex: () => void;
    setActiveItemIndex: (index: number) => void;
    addToActiveItemChangeListeners: (listener: (index: number) => void) => void;
    removeActiveItemChangeListener: (listener: (index: number) => void) => void;
    addToItemSelectByKeyboardListeners: (listener: (index: number) => void) => void;
    removeItemSelectByKeyboardListener: (listener: (index: number) => void) => void;
}, {
    activeItemChangeListeners: Array<(index: number) => void>;
    itemSelectByKeyboardListeners: Array<(index: number) => void>;
}, {
    popoverClass(): string[];
}, {
    addEventListeners(): void;
    removeEventListeners(): void;
    /**
     *
     * @param event {Event}
     */
    checkOutsideClick(event: MouseEvent): void;
    navigate({ key }: {
        key: string;
    }): void;
    navigateNext(): void;
    navigatePrevious(): void;
    updateScrollPosition(): void;
    emitClicked(): void;
    onScroll(event: UIEvent): void;
    getBottomDistance(element: Element): number;
}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    options: {
        type: ArrayConstructor;
        required: false;
        default(): never[];
    };
    emptyMessage: {
        type: StringConstructor;
        required: false;
        default: null;
    };
    focusEl: {
        type: PropType<HTMLDocument | HTMLElement>;
        required: false;
        default(): Document;
    };
    isLoading: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    popoverClasses: {
        type: PropType<string[]>;
        required: false;
        default(): never[];
    };
    popoverResizeWidth: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & Readonly<{}>, {
    options: unknown[];
    isLoading: boolean;
    emptyMessage: string;
    focusEl: HTMLElement | HTMLDocument;
    popoverClasses: string[];
    popoverResizeWidth: boolean;
}, {}, {
    "mt-popover-deprecated": import('vue').DefineComponent<import('vue').ExtractPropTypes<{
        zIndex: {
            type: PropType<number | null>;
            required: false;
            default: null;
        };
        resizeWidth: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        popoverClass: {
            type: PropType<string | unknown[] | Record<string, unknown>>;
            required: false;
            default: string;
        };
    }>, {}, {}, {
        componentStyle(): {
            "z-Index": number | null;
        };
        popoverConfig(): {
            active: boolean;
            resizeWidth: boolean;
        };
    }, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
        zIndex: {
            type: PropType<number | null>;
            required: false;
            default: null;
        };
        resizeWidth: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        popoverClass: {
            type: PropType<string | unknown[] | Record<string, unknown>>;
            required: false;
            default: string;
        };
    }>> & Readonly<{}>, {
        zIndex: number | null;
        resizeWidth: boolean;
        popoverClass: string | unknown[] | Record<string, unknown>;
    }, {}, {}, {
        popover: import('vue').Directive;
    }, string, import('vue').ComponentProvideOptions, true, {}, any>;
    "mt-icon": import('vue').DefineComponent<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
        name: string;
        color?: string;
        decorative?: boolean;
        size?: string;
    }> & Readonly<{}>, {
        decorative: boolean;
        size: string;
    }, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
}, {}, string, () => {
    setActiveItemIndex: (index: number) => void;
}, true, {}, any>;
export default _default;
