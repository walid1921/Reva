(window["webpackJsonpPluginswag-pay-pal"]=window["webpackJsonpPluginswag-pay-pal"]||[]).push([[8949],{4284:function(){},8949:function(t,a,e){"use strict";e.r(a),e.d(a,{default:function(){return i}}),e(2159);let{Context:n}=Shopware;var i=Shopware.Component.wrapComponentConfig({template:'{% block swag_paypal_checkout_method %}\n<div class="swag-paypal-checkout-method">\n\n    {% block swag_paypal_checkout_method_icon %}\n    <img\n        v-if="paymentMethod.media"\n        class="swag-paypal-checkout-method__icon"\n        :src="paymentMethod.media.url"\n        :alt="paymentMethod.media.translated.alt"\n    >\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_name %}\n    <div class="swag-paypal-checkout-method__name">\n        {{ paymentMethod.translated.name }} <span v-if="isPayPalPui">({{ $tc(\'swag-paypal.settingForm.checkout.ratePayLabel\') }})</span>\n    </div>\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_dynamic %}\n    <div class="swag-paypal-checkout-method__dynamic">\n        {% block swag_paypal_checkout_method_pui_help_text %}\n        <sw-help-text\n            v-if="availabilityToolTip"\n            :text="availabilityToolTip"\n        />\n        {% endblock %}\n\n        {% block swag_paypal_checkout_method_onboarding_status %}\n        <sw-label\n            v-tooltip="{\n                message: onboardingStatusTooltip,\n                position: \'top\',\n                disabled: !onboardingStatusTooltip,\n            }"\n            class="swag-plugin-box-with-onboarding__status-label"\n            size="medium"\n            appearance="pill"\n            :variant="statusBadgeVariant"\n            :ghost="false"\n            :caps="false"\n        >\n\n            {% block swag_paypal_checkout_method_onboarding_status_badge %}\n            <sw-color-badge\n                class="swag-plugin-box-with-onboarding__status-badge"\n                rounded\n                :color="statusBadgeColor"\n            />\n            {% endblock %}\n\n            {% block swag_paypal_checkout_method_onboarding_status_text %}\n            <span class="swag-plugin-box-with-onboarding__status-text">\n                {{ onboardingStatusText }}\n            </span>\n            {% endblock %}\n\n        </sw-label>\n        {% endblock %}\n\n        {% block swag_paypal_checkout_method_edit_detail_link %}\n        <router-link\n            v-if="showEditLink"\n            class="swag-paypal-checkout-method__show-detail-link"\n            :to="editLink"\n        >\n            {{ $tc(\'swag-paypal.settingForm.checkout.editDetail\') }}\n        </router-link>\n        {% endblock %}\n    </div>\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_active_switch %}\n    <sw-switch-field\n        :label="$tc(\'swag-paypal.settingForm.checkout.switch.label\')"\n        :disabled="paymentMethodToggleDisabled || !acl.can(\'swag_paypal.editor\')"\n        :value="paymentMethod.active"\n        @update:value="onChangePaymentMethodActive"\n    />\n    {% endblock %}\n\n    {% block swag_paypal_checkout_method_apple_pay_domain_association %}\n    <swag-paypal-checkout-domain-association\n        v-if="isApplePayAndActive && isAlertActive"\n        :is-sandbox="actualConfigData[\'SwagPayPal.settings.sandbox\']"\n        @hideDomainAssociationEvent="hideDomainAssociationAlert"\n    />\n    {% endblock %}\n</div>\n{% endblock %}\n',inject:["acl","repositoryFactory"],mixins:[Shopware.Mixin.getByName("notification")],props:{paymentMethod:{type:Object,required:!0},onboardingStatus:{type:String,required:!1,default:"inactive"},actualConfigData:{type:Object,required:!0,default:()=>({})}},data(){return{merchantIntegrations:{},isAlertActive:!localStorage.getItem("domain-association-hidden")}},computed:{isApplePayAndActive(){let t=this.paymentMethod.formattedHandlerIdentifier.split("_");return this.paymentMethod.active&&"applepayhandler"===t[t.length-1]},isPayPalPui(){return this.paymentMethod.formattedHandlerIdentifier?.split("_").pop()==="puihandler"},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},editLink(){return{name:"sw.settings.payment.detail",params:{id:this.paymentMethod.id}}},paymentMethodToggleDisabled(){return!this.paymentMethod.active&&!this.showEditLink},showEditLink(){return["active","limited","mybank"].includes(this.onboardingStatus)},statusBadgeVariant(){switch(this.onboardingStatus){case"active":return"success";case"limited":case"mybank":return"danger";case"inactive":case"ineligible":default:return"neutral";case"pending":return"info"}},statusBadgeColor(){switch(this.onboardingStatus){case"active":return"#37D046";case"limited":case"mybank":return"#ff9800";case"inactive":case"ineligible":return"#52667A";default:return"#189eff"}},onboardingStatusText(){return this.$tc(`swag-paypal.settingForm.checkout.onboardingStatusText.${this.onboardingStatus}`)},onboardingStatusTooltip(){let t=`swag-paypal.settingForm.checkout.onboardingStatusTooltip.${this.onboardingStatus}`;return this.$te(t)?this.$tc(t):null},availabilityToolTip(){if(!this.paymentMethod.formattedHandlerIdentifier)return null;let t=this.paymentMethod.formattedHandlerIdentifier.split("_"),a=t[t.length-1],e=`swag-paypal.settingForm.checkout.availabilityToolTip.${a}`;return this.$te(e)?this.$tc(e):null}},methods:{onChangePaymentMethodActive(t){this.paymentMethod.active!==t&&(this.isApplePayAndActive&&(localStorage.removeItem("domain-association-hidden"),this.isAlertActive=!0),this.paymentMethod.active=t,this.paymentMethodRepository.save(this.paymentMethod,n.api).then(()=>{let t=this.paymentMethod.active?"active":"inactive";this.createNotificationSuccess({message:this.$tc(`swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${t}`,0,{name:this.paymentMethod.name})})}))},hideDomainAssociationAlert(){localStorage.setItem("domain-association-hidden","true"),this.isAlertActive=!1}}})},2159:function(t,a,e){var n=e(4284);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[t.id,n,""]]),n.locals&&(t.exports=n.locals),(0,e(534).A)("5eb634df",n,!0,{})}}]);