(window["webpackJsonpPluginswag-pay-pal"]=window["webpackJsonpPluginswag-pay-pal"]||[]).push([[4274],{4501:function(){},3243:function(t,a,n){"use strict";n.d(a,{CY:function(){return i},Lw:function(){return s},YR:function(){return r},YZ:function(){return e},pR:function(){return l},qT:function(){return g},wB:function(){return o}});let e=["ar_EG","cs_CZ","da_DK","de_DE","el_GR","en_AU","en_GB","en_IN","en_US","es_ES","es_XC","fi_FI","fr_CA","fr_FR","fr_XC","he_IL","hu_HU","id_ID","it_IT","ja_JP","ko_KR","nl_NL","no_NO","pl_PL","pt_BR","pt_PT","ru_RU","sk_SK","sv_SE","th_TH","zh_CN","zh_HK","zh_TW","zh_XC"],s=["en-AU","de-DE","es-ES","fr-FR","en-GB","it-IT","en-US"],i=["CAPTURE","AUTHORIZE"],l=["LOGIN","GUEST_CHECKOUT","NO_PREFERENCE"],g=["blue","black","gold","silver","white"],r=["sharp","pill","rect"],o=["SwagPayPal.settings.clientId","SwagPayPal.settings.clientSecret","SwagPayPal.settings.clientIdSandbox","SwagPayPal.settings.clientSecretSandbox","SwagPayPal.settings.merchantPayerId","SwagPayPal.settings.merchantPayerIdSandbox","SwagPayPal.settings.sandbox","SwagPayPal.settings.intent","SwagPayPal.settings.submitCart","SwagPayPal.settings.brandName","SwagPayPal.settings.landingPage","SwagPayPal.settings.sendOrderNumber","SwagPayPal.settings.orderNumberPrefix","SwagPayPal.settings.orderNumberSuffix","SwagPayPal.settings.excludedProductIds","SwagPayPal.settings.excludedProductStreamIds","SwagPayPal.settings.ecsDetailEnabled","SwagPayPal.settings.ecsCartEnabled","SwagPayPal.settings.ecsOffCanvasEnabled","SwagPayPal.settings.ecsLoginEnabled","SwagPayPal.settings.ecsListingEnabled","SwagPayPal.settings.ecsButtonColor","SwagPayPal.settings.ecsButtonShape","SwagPayPal.settings.ecsButtonLanguageIso","SwagPayPal.settings.ecsShowPayLater","SwagPayPal.settings.spbButtonColor","SwagPayPal.settings.spbButtonShape","SwagPayPal.settings.spbButtonLanguageIso","SwagPayPal.settings.spbShowPayLater","SwagPayPal.settings.spbCheckoutEnabled","SwagPayPal.settings.spbAlternativePaymentMethodsEnabled","SwagPayPal.settings.acdcForce3DS","SwagPayPal.settings.puiCustomerServiceInstructions","SwagPayPal.settings.installmentBannerDetailPageEnabled","SwagPayPal.settings.installmentBannerCartEnabled","SwagPayPal.settings.installmentBannerOffCanvasCartEnabled","SwagPayPal.settings.installmentBannerLoginPageEnabled","SwagPayPal.settings.installmentBannerFooterEnabled","SwagPayPal.settings.vaultingEnabled","SwagPayPal.settings.vaultingEnableAlways","SwagPayPal.settings.vaultingEnabledWallet","SwagPayPal.settings.vaultingEnabledACDC","SwagPayPal.settings.vaultingEnabledVenmo","SwagPayPal.settings.crossBorderMessagingEnabled","SwagPayPal.settings.crossBorderBuyerCountry","SwagPayPal.settings.webhookId","SwagPayPal.settings.webhookExecuteToken","SwagPayPal.settings.merchantLocation","SwagPayPal.settings.plusCheckoutEnabled"]},4274:function(t,a,n){"use strict";n.r(a),n.d(a,{default:function(){return i}}),n(9572);var e=n(3243);let{Criteria:s}=Shopware.Data;var i=Shopware.Component.wrapComponentConfig({template:'{% block swag_paypal_settings_live_credentials %}\n<sw-card\n    class="swag-paypal-settings-live-credentials"\n    position-identifier="swag-paypal-settings-live-credentials"\n    :is-loading="settingsStore.isLoading"\n>\n    <template #title>\n        <swag-paypal-setting\n            class="sw-card__title"\n            path="SwagPayPal.settings.sandbox"\n            :bordered="false"\n            :label="$t(\'swag-paypal-settings.credentialsLive.title\')"\n            :help-text="null"\n        >\n            <template #content="props">\n                <sw-switch-field\n                    :name="props.path"\n                    :disabled="props.disabled"\n                    :value="!props.currentValue"\n                    @update:value="props.updateCurrentValue(!$event)"\n                />\n            </template>\n        </swag-paypal-setting>\n    </template>\n\n    <template #header-right>\n        <sw-button-process\n            :process-success="testCredentials === \'success\'"\n            :is-loading="testCredentials === \'loading\'"\n            size="small"\n            @update:process-success="testCredentials = \'none\'"\n            @click="onTest(\'\')"\n        >\n            {{ $t(\'swag-paypal-settings.credentialsLive.test\') }}\n        </sw-button-process>\n    </template>\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.clientId"\n        :disabled="settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.clientSecret"\n        :disabled="settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.merchantPayerId"\n        :disabled="settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n</sw-card>\n{% endblock %}\n\n{% block swag_paypal_settings_sandbox_credentials %}\n<sw-card\n    class="swag-paypal-settings-sandbox-credentials"\n    position-identifier="swag-paypal-sandbox-credentials"\n    :is-loading="settingsStore.isLoading"\n>\n    <template #title>\n        <swag-paypal-setting\n            class="sw-card__title"\n            path="SwagPayPal.settings.sandbox"\n            :label="$t(\'swag-paypal-settings.credentialsSandbox.title\')"\n            :help-text="null"\n            :bordered="false"\n        />\n    </template>\n\n    <template #header-right>\n        <sw-button-process\n            :process-success="testCredentialsSandbox === \'success\'"\n            :is-loading="testCredentialsSandbox === \'loading\'"\n            size="small"\n            @update:process-success="testCredentialsSandbox = \'none\'"\n            @click="onTest(\'Sandbox\')"\n        >\n            {{ $t(\'swag-paypal-settings.credentialsSandbox.test\') }}\n        </sw-button-process>\n    </template>\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.clientIdSandbox"\n        :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.clientSecretSandbox"\n        :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.merchantPayerIdSandbox"\n        :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel"\n    />\n</sw-card>\n{% endblock %}\n\n<sw-card\n    class="swag-paypal-settings-behavior"\n    position-identifier="swag-paypal-settings-behavior"\n    :title="$t(\'swag-paypal-settings.behavior.title\')"\n    :is-loading="settingsStore.isLoading"\n>\n    <swag-paypal-setting\n        path="SwagPayPal.settings.intent"\n        :options="intentOptions"\n    />\n\n    <swag-paypal-setting path="SwagPayPal.settings.submitCart" />\n\n    <swag-paypal-setting path="SwagPayPal.settings.brandName" />\n\n    <swag-paypal-setting\n        path="SwagPayPal.settings.landingPage"\n        :options="landingPageOptions"\n    />\n\n    <swag-paypal-setting path="SwagPayPal.settings.sendOrderNumber" />\n\n    <sw-container columns="1fr 1fr" gap="0px 30px">\n        <swag-paypal-setting path="SwagPayPal.settings.orderNumberPrefix" />\n        <swag-paypal-setting path="SwagPayPal.settings.orderNumberSuffix" />\n    </sw-container>\n\n    <swag-paypal-setting path="SwagPayPal.settings.excludedProductIds">\n        <template #content="props">\n            <sw-entity-multi-id-select\n                name="SwagPayPal.settings.excludedProductIds"\n                :repository="productRepository"\n                :criteria="excludedProductCriteria"\n                :map-inheritance="props"\n                :disabled="props.disabled"\n                :value="props.currentValue"\n                @update:value="props.updateCurrentValue"\n            >\n                <template #selection-label-property="{ item }">\n                    <sw-product-variant-info\n                        :variations="item.variation"\n                    >\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n\n                <template #result-label-property="{ item }">\n                    <sw-product-variant-info\n                        :variations="item.variation"\n                    >\n                        {{ item.translated.name || item.name }}\n                    </sw-product-variant-info>\n                </template>\n\n            </sw-entity-multi-id-select>\n        </template>\n    </swag-paypal-setting>\n\n    <swag-paypal-setting path="SwagPayPal.settings.excludedProductStreamIds">\n        <template #content="props">\n            <sw-entity-multi-id-select\n                name="SwagPayPal.settings.excludedProductStreamIds"\n                :repository="productStreamRepository"\n                :map-inheritance="props"\n                :disabled="props.disabled"\n                :value="props.currentValue"\n                @update:value="props.updateCurrentValue"\n            />\n        </template>\n    </swag-paypal-setting>\n</sw-card>\n\n<sw-card\n    class="swag-paypal-settings-vaulting"\n    position-identifier="swag-paypal-settings-vaulting"\n    :title="$t(\'swag-paypal-settings.vaulting.title\')"\n    :is-loading="merchantInformationStore.isLoading || settingsStore.isLoading"\n>\n    <div class="swag-paypal-settings-vaulting__description-title">\n        {{ $t(\'swag-paypal-settings.vaulting.descriptionTitle\') }}\n    </div>\n\n    <div class="swag-paypal-settings-vaulting__description-text">\n        {{ $t(\'swag-paypal-settings.vaulting.descriptionText\') }}\n    </div>\n\n    <template v-if="!merchantInformationStore.isLoading">\n        <swag-paypal-setting\n            v-if="merchantInformationStore.canVault"\n            path="SwagPayPal.settings.vaultingEnabledWallet"\n        />\n\n        <swag-paypal-setting\n            v-if="merchantInformationStore.canVault"\n            path="SwagPayPal.settings.vaultingEnabledACDC"\n        />\n\n        <swag-paypal-setting\n            v-if="merchantInformationStore.canVault"\n            path="SwagPayPal.settings.vaultingEnabledVenmo"\n        />\n\n        <div v-if="!merchantInformationStore.canVault">\n            <swag-paypal-onboarding-button\n                class="swag-paypal-settings-vaulting__activate-button"\n                :type="settingsStore.isSandbox ? \'sandbox\' : \'live\'"\n            >\n                {{ $t(\'swag-paypal-settings.vaulting.activeButtonLabel\') }}\n            </swag-paypal-onboarding-button>\n        </div>\n    </template>\n</sw-card>\n\n<sw-card\n    class="swag-paypal-settings-acdc"\n    position-identifier="swag-paypal-settings-acdc"\n    :title="$t(\'swag-paypal-settings.acdc.title\')"\n    :is-loading="settingsStore.isLoading"\n>\n    <swag-paypal-setting path="SwagPayPal.settings.acdcForce3DS" />\n</sw-card>\n\n<sw-card\n    class="swag-paypal-settings-pui"\n    position-identifier="swag-paypal-settings-pui"\n    :title="$t(\'swag-paypal-settings.pui.title\')"\n    :is-loading="settingsStore.isLoading"\n>\n    <swag-paypal-setting path="SwagPayPal.settings.puiCustomerServiceInstructions" />\n</sw-card>\n',compatConfig:Shopware.compatConfig,inject:["acl","repositoryFactory","SwagPayPalSettingsService"],mixins:[Shopware.Mixin.getByName("swag-paypal-notification")],data(){return{testCredentials:"none",testCredentialsSandbox:"none"}},computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},merchantInformationStore(){return Shopware.Store.get("swagPayPalMerchantInformation")},intentOptions(){return e.CY.map(t=>({value:t,label:this.$t(`swag-paypal-settings.options.intent.${t}`)}))},landingPageOptions(){return e.pR.map(t=>({value:t,label:this.$t(`swag-paypal-settings.options.landingPage.${t}`)}))},productRepository(){return this.repositoryFactory.create("product")},productStreamRepository(){return this.repositoryFactory.create("product_stream")},excludedProductCriteria(){return new s(1,25).addAssociation("options.group")}},methods:{async onTest(t){this[`testCredentials${t}`]="loading";let a=await this.SwagPayPalSettingsService.testApiCredentials(this.settingsStore.get(`SwagPayPal.settings.clientId${t}`),this.settingsStore.get(`SwagPayPal.settings.clientSecret${t}`),this.settingsStore.get(`SwagPayPal.settings.merchantPayerId${t}`),"Sandbox"===t).catch(t=>t.response?.data??{errors:[]});a.valid?this.createNotificationSuccess({title:this.$t("swag-paypal.notifications.test.title"),message:this.$t("swag-paypal.notifications.test.successMessage")}):a.errors&&this.createNotificationError({title:this.$t("swag-paypal.notifications.test.title"),message:this.$t("swag-paypal.notifications.test.errorMessage",{message:this.createMessageFromError(a)})}),this[`testCredentials${t}`]=a.valid?"success":"none"}}})},9572:function(t,a,n){var e=n(4501);e.__esModule&&(e=e.default),"string"==typeof e&&(e=[[t.id,e,""]]),e.locals&&(t.exports=e.locals),(0,n(534).A)("345a5324",e,!0,{})}}]);