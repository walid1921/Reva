"use strict";(window["webpackJsonpPluginswag-pay-pal"]=window["webpackJsonpPluginswag-pay-pal"]||[]).push([[8304],{8304:function(e,n,a){a.r(n),a.d(n,{default:function(){return l}});let{Defaults:t}=Shopware,{Criteria:s}=Shopware.Data;var l=Shopware.Component.wrapComponentConfig({template:'<sw-card\n    class="swag-paypal-settings-sales-channel-switch"\n    position-identifier="swag-paypal-settings-sales-channel-switch"\n    :title="$tc(\'global.entities.sales_channel\', 2)"\n>\n    <template #header-right>\n        <sw-internal-link :router-link="{ name: \'sw.settings.payment.overview\' }">\n            {{ $t(\'sw-settings-payment.general.mainMenuItemGeneral\') }}\n        </sw-internal-link>\n    </template>\n\n    <sw-single-select\n        v-model:value="settingsStore.salesChannel"\n        :is-loading="isLoading || settingsStore.isLoading"\n        :options="salesChannels"\n        :disabled="!acl.can(\'swag_paypal.editor\') || isLoading || settingsStore.isLoading"\n    />\n\n    <template #footer>\n        <sw-container columns="2fr 1fr" gap="0px 30px">\n            <p>{{ $t(\'swag-paypal-settings-sales-channel-switch.description\') }}</p>\n\n            <sw-button-process\n                :process-success="defaultPaymentMethods === \'success\'"\n                :is-loading="defaultPaymentMethods === \'loading\'"\n                :disabled="!acl.can(\'swag_paypal.editor\') || isLoading"\n                @update:process-success="defaultPaymentMethods === \'none\'"\n                @click="onSetPaymentMethodDefault"\n            >\n                {{ $t(\'swag-paypal-settings-sales-channel-switch.label\') }}\n            </sw-button-process>\n        </sw-container>\n    </template>\n</sw-card>\n',compatConfig:Shopware.compatConfig,inject:["acl","repositoryFactory","SwagPaypalPaymentMethodService"],data(){return{isLoading:!0,salesChannels:[],defaultPaymentMethods:"none"}},computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},salesChannelCriteria(){let e=new s(1,500);return e.addFilter(s.equalsAny("typeId",[t.storefrontSalesChannelTypeId,t.apiSalesChannelTypeId])),e}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchSalesChannels()},async fetchSalesChannels(){try{let e=await this.salesChannelRepository.search(this.salesChannelCriteria,Shopware.Context.api);this.salesChannels=[{value:null,label:this.$t("sw-sales-channel-switch.labelDefaultOption")}],e.forEach(e=>{this.salesChannels.push({value:e.id,label:e.translated?.name||e.name})})}finally{this.isLoading=!1}},onSetPaymentMethodDefault(){this.defaultPaymentMethods="loading",this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(this.settingsStore.salesChannel).then(()=>{this.defaultPaymentMethods="success"}).catch(()=>{this.defaultPaymentMethods="none"})}}})}}]);